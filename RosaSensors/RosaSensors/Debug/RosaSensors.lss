
RosaSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800106  00800106  00000edc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000042c5  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010cc  00000000  00000000  000053d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d23  00000000  00000000  000064a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  000071c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e58  00000000  00000000  00007878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e55  00000000  00000000  000086d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000a525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

00000094 <__ctors_start>:
  94:	3c 02       	muls	r19, r28
  96:	8b 03       	fmulsu	r16, r19

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e4       	ldi	r30, 0x42	; 66
  ac:	fe e0       	ldi	r31, 0x0E	; 14
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a6 30       	cpi	r26, 0x06	; 6
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a6 e0       	ldi	r26, 0x06	; 6
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 35       	cpi	r26, 0x53	; 83
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	c8 e9       	ldi	r28, 0x98	; 152
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
  d2:	22 97       	sbiw	r28, 0x02	; 2
  d4:	fe 01       	movw	r30, r28
  d6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__tablejump__>
  da:	c4 39       	cpi	r28, 0x94	; 148
  dc:	d1 07       	cpc	r29, r17
  de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
  e0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
  e4:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_ZN6OutBitaSEb>:
 */ 

#include "OutBit.h"

void OutBit::operator=(bool value){
	if(value)
  ec:	66 23       	and	r22, r22
  ee:	99 f0       	breq	.+38     	; 0x116 <_ZN6OutBitaSEb+0x2a>
	*pt |= 1<<wbit;
  f0:	dc 01       	movw	r26, r24
  f2:	ed 91       	ld	r30, X+
  f4:	fc 91       	ld	r31, X
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	40 81       	ld	r20, Z
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	12 96       	adiw	r26, 0x02	; 2
 102:	0c 90       	ld	r0, X
 104:	02 c0       	rjmp	.+4      	; 0x10a <_ZN6OutBitaSEb+0x1e>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <_ZN6OutBitaSEb+0x1a>
 10e:	cb 01       	movw	r24, r22
 110:	84 2b       	or	r24, r20
 112:	80 83       	st	Z, r24
 114:	08 95       	ret
	else
	*pt &= ~(1<<wbit);
 116:	dc 01       	movw	r26, r24
 118:	ed 91       	ld	r30, X+
 11a:	fc 91       	ld	r31, X
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	40 81       	ld	r20, Z
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	12 96       	adiw	r26, 0x02	; 2
 128:	0c 90       	ld	r0, X
 12a:	02 c0       	rjmp	.+4      	; 0x130 <_ZN6OutBitaSEb+0x44>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <_ZN6OutBitaSEb+0x40>
 134:	cb 01       	movw	r24, r22
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <_ZN4Rosa8Rs485Std8send_msgEhPh>:
	Rs485Std::~Rs485Std()
	{
	} //~Rs485Std

	void Rs485Std::send_msg( uint8_t data_length, uint8_t *msg )
	{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
		tx_enable->set();
 144:	aa 81       	ldd	r26, Y+2	; 0x02
 146:	bb 81       	ldd	r27, Y+3	; 0x03
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
 148:	ed 91       	ld	r30, X+
 14a:	fc 91       	ld	r31, X
 14c:	11 97       	sbiw	r26, 0x01	; 1
 14e:	70 81       	ld	r23, Z
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	c9 01       	movw	r24, r18
 156:	12 96       	adiw	r26, 0x02	; 2
 158:	0c 90       	ld	r0, X
 15a:	02 c0       	rjmp	.+4      	; 0x160 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x22>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <_ZN4Rosa8Rs485Std8send_msgEhPh+0x1e>
 164:	87 2b       	or	r24, r23
 166:	80 83       	st	Z, r24
		
		uart->send_stream(data_length,msg);
 168:	88 81       	ld	r24, Y
 16a:	99 81       	ldd	r25, Y+1	; 0x01
 16c:	0e 94 21 02 	call	0x442	; 0x442 <_ZNK4Rosa7UartStd11send_streamEhPh>
		
		while(uart->transmit_ongoing());
 170:	88 81       	ld	r24, Y
 172:	99 81       	ldd	r25, Y+1	; 0x01
 174:	0e 94 00 02 	call	0x400	; 0x400 <_ZNK4Rosa7UartStd16transmit_ongoingEv>
 178:	81 11       	cpse	r24, r1
 17a:	fa cf       	rjmp	.-12     	; 0x170 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x32>
		tx_enable->unset();
 17c:	aa 81       	ldd	r26, Y+2	; 0x02
 17e:	bb 81       	ldd	r27, Y+3	; 0x03
	
	inline OutBit unset(){*pt = *pt & ~(1<<wbit);	return *this;}
 180:	ed 91       	ld	r30, X+
 182:	fc 91       	ld	r31, X
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	20 81       	ld	r18, Z
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	0c 90       	ld	r0, X
 190:	02 c0       	rjmp	.+4      	; 0x196 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x58>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x54>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	80 83       	st	Z, r24
		
	}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <_ZN4Rosa8Rs485Std8read_msgERhPhhh>:

	bool Rs485Std::read_msg( uint8_t& data_length, uint8_t *msg, uint8_t byte_timeout, uint8_t response_timeout)
	{
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	7c 01       	movw	r14, r24
 1ba:	eb 01       	movw	r28, r22
 1bc:	6a 01       	movw	r12, r20
 1be:	12 2f       	mov	r17, r18
 1c0:	60 2f       	mov	r22, r16
		rx_enable->unset();
 1c2:	fc 01       	movw	r30, r24
 1c4:	a4 81       	ldd	r26, Z+4	; 0x04
 1c6:	b5 81       	ldd	r27, Z+5	; 0x05
 1c8:	ed 91       	ld	r30, X+
 1ca:	fc 91       	ld	r31, X
 1cc:	11 97       	sbiw	r26, 0x01	; 1
 1ce:	20 81       	ld	r18, Z
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	12 96       	adiw	r26, 0x02	; 2
 1d6:	0c 90       	ld	r0, X
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x38>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x34>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	80 83       	st	Z, r24
		
		if(!uart->read(response_timeout,msg)){
 1e8:	f7 01       	movw	r30, r14
 1ea:	80 81       	ld	r24, Z
 1ec:	91 81       	ldd	r25, Z+1	; 0x01
 1ee:	0e 94 89 01 	call	0x312	; 0x312 <_ZNK4Rosa7UartStd4readEhPh>
 1f2:	08 2f       	mov	r16, r24
 1f4:	81 11       	cpse	r24, r1
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x56>
			data_length=0;
 1f8:	18 82       	st	Y, r1
			return false;
 1fa:	2a c0       	rjmp	.+84     	; 0x250 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0xaa>
		}
		
		uint8_t max_length = data_length;
 1fc:	b8 80       	ld	r11, Y
		
		for ( data_length = 1 ; data_length < max_length ; data_length++)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	88 83       	st	Y, r24
 202:	8b 15       	cp	r24, r11
 204:	80 f4       	brcc	.+32     	; 0x226 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x80>
		if(!uart->read(byte_timeout,msg+data_length))
 206:	a6 01       	movw	r20, r12
 208:	48 0f       	add	r20, r24
 20a:	51 1d       	adc	r21, r1
 20c:	61 2f       	mov	r22, r17
 20e:	f7 01       	movw	r30, r14
 210:	80 81       	ld	r24, Z
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	0e 94 89 01 	call	0x312	; 0x312 <_ZNK4Rosa7UartStd4readEhPh>
 218:	88 23       	and	r24, r24
 21a:	c9 f0       	breq	.+50     	; 0x24e <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0xa8>
			return false;
		}
		
		uint8_t max_length = data_length;
		
		for ( data_length = 1 ; data_length < max_length ; data_length++)
 21c:	88 81       	ld	r24, Y
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	88 83       	st	Y, r24
 222:	8b 15       	cp	r24, r11
 224:	80 f3       	brcs	.-32     	; 0x206 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x60>
		if(!uart->read(byte_timeout,msg+data_length))
		return false;
		
		
		rx_enable->set();
 226:	f7 01       	movw	r30, r14
 228:	a4 81       	ldd	r26, Z+4	; 0x04
 22a:	b5 81       	ldd	r27, Z+5	; 0x05
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
 22c:	ed 91       	ld	r30, X+
 22e:	fc 91       	ld	r31, X
 230:	11 97       	sbiw	r26, 0x01	; 1
 232:	80 81       	ld	r24, Z
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	9a 01       	movw	r18, r20
 23a:	12 96       	adiw	r26, 0x02	; 2
 23c:	0c 90       	ld	r0, X
 23e:	02 c0       	rjmp	.+4      	; 0x244 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x9e>
 240:	22 0f       	add	r18, r18
 242:	33 1f       	adc	r19, r19
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0x9a>
 248:	28 2b       	or	r18, r24
 24a:	20 83       	st	Z, r18
		
		return true;
 24c:	01 c0       	rjmp	.+2      	; 0x250 <_ZN4Rosa8Rs485Std8read_msgERhPhhh+0xaa>
		
		uint8_t max_length = data_length;
		
		for ( data_length = 1 ; data_length < max_length ; data_length++)
		if(!uart->read(byte_timeout,msg+data_length))
		return false;
 24e:	08 2f       	mov	r16, r24
		
		
		rx_enable->set();
		
		return true;
	}
 250:	80 2f       	mov	r24, r16
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	bf 90       	pop	r11
 264:	08 95       	ret

00000266 <_ZNK4Rosa7UartStd6enableEv>:
	&UCSR0C,
	&UBRR0,
	&UDR0
	);
	void UartStd::enable(void) const
	{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
		/* Set baud rate */
		*(UBRR) = (((F_CPU / (config->baud * 16UL))) - 1);
 270:	0e 81       	ldd	r16, Y+6	; 0x06
 272:	1f 81       	ldd	r17, Y+7	; 0x07
 274:	ea 85       	ldd	r30, Y+10	; 0x0a
 276:	fb 85       	ldd	r31, Y+11	; 0x0b
 278:	80 81       	ld	r24, Z
 27a:	91 81       	ldd	r25, Z+1	; 0x01
 27c:	a2 81       	ldd	r26, Z+2	; 0x02
 27e:	b3 81       	ldd	r27, Z+3	; 0x03
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	9c 01       	movw	r18, r24
 292:	ad 01       	movw	r20, r26
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	44 1f       	adc	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	44 1f       	adc	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	72 e1       	ldi	r23, 0x12	; 18
 2a8:	8a e7       	ldi	r24, 0x7A	; 122
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 d0 05 	call	0xba0	; 0xba0 <__udivmodsi4>
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	31 09       	sbc	r19, r1
 2b4:	f8 01       	movw	r30, r16
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
		/* Set frame format: 8data, no parity & 2 stop bits */
		*(UCSRC) = (1<<UCSZ1) | (1<<UCSZ0) | (config->stopbit << USBS);
 2ba:	ec 81       	ldd	r30, Y+4	; 0x04
 2bc:	fd 81       	ldd	r31, Y+5	; 0x05
 2be:	aa 85       	ldd	r26, Y+10	; 0x0a
 2c0:	bb 85       	ldd	r27, Y+11	; 0x0b
 2c2:	15 96       	adiw	r26, 0x05	; 5
 2c4:	8c 91       	ld	r24, X
 2c6:	88 0f       	add	r24, r24
 2c8:	88 0f       	add	r24, r24
 2ca:	88 0f       	add	r24, r24
 2cc:	86 60       	ori	r24, 0x06	; 6
 2ce:	80 83       	st	Z, r24
		/* Enable receiver and transmitter */
		*(UCSRB) = (1<<RXEN) | (1<<TXEN);// | (1<<RXCIE);
 2d0:	ea 81       	ldd	r30, Y+2	; 0x02
 2d2:	fb 81       	ldd	r31, Y+3	; 0x03
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	80 83       	st	Z, r24
	}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <_ZNK4Rosa7UartStd4readEPb>:
	uint8_t UartStd::read(bool* status) const
	{
		uint8_t readed,data;
		
		while (((readed=*(UCSRA)) & RX_COMPLETE )==0) continue;
 2e2:	dc 01       	movw	r26, r24
 2e4:	ed 91       	ld	r30, X+
 2e6:	fc 91       	ld	r31, X
 2e8:	20 81       	ld	r18, Z
 2ea:	22 23       	and	r18, r18
 2ec:	ec f7       	brge	.-6      	; 0x2e8 <_ZNK4Rosa7UartStd4readEPb+0x6>
		
		data = *(UDR);
 2ee:	dc 01       	movw	r26, r24
 2f0:	18 96       	adiw	r26, 0x08	; 8
 2f2:	ed 91       	ld	r30, X+
 2f4:	fc 91       	ld	r31, X
 2f6:	19 97       	sbiw	r26, 0x09	; 9
 2f8:	80 81       	ld	r24, Z
		
		if (status != NULL)
 2fa:	61 15       	cp	r22, r1
 2fc:	71 05       	cpc	r23, r1
 2fe:	41 f0       	breq	.+16     	; 0x310 <_ZNK4Rosa7UartStd4readEPb+0x2e>
		{
			if ((readed & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 300:	2c 71       	andi	r18, 0x1C	; 28
 302:	21 f4       	brne	.+8      	; 0x30c <_ZNK4Rosa7UartStd4readEPb+0x2a>
			*status = true;
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	fb 01       	movw	r30, r22
 308:	90 83       	st	Z, r25
 30a:	08 95       	ret
			else
			*status = false;
 30c:	db 01       	movw	r26, r22
 30e:	1c 92       	st	X, r1
		}
		
		return data;
		
	}
 310:	08 95       	ret

00000312 <_ZNK4Rosa7UartStd4readEhPh>:

	bool UartStd::read( uint8_t timeout_ms, uint8_t* data) const
	{
		uint8_t readed;
		TCCR1B = 0; //set NO CLOCK TCCR1A=0, TCCR1B = 0b101;
 312:	10 92 81 00 	sts	0x0081, r1
		TCNT1 =(uint16_t) 0; //Clear counter
 316:	10 92 85 00 	sts	0x0085, r1
 31a:	10 92 84 00 	sts	0x0084, r1
		OCR1A = (uint16_t) (timeout_ms << 3); //set number of cycles to compare (with PRESCALER 1024 set on 0b101<<CS0) 8 = 7.8 = /1000f * F_CPU/1024f;
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	70 93 89 00 	sts	0x0089, r23
 330:	60 93 88 00 	sts	0x0088, r22
		
		if(TIFR1 & (1<<OCF1A))
 334:	b1 9b       	sbis	0x16, 1	; 22
 336:	02 c0       	rjmp	.+4      	; 0x33c <_ZNK4Rosa7UartStd4readEhPh+0x2a>
		TIFR1 = 1<<OCF1A; //Clear compare flag
 338:	22 e0       	ldi	r18, 0x02	; 2
 33a:	26 bb       	out	0x16, r18	; 22
		
		TCCR1B = 0b101; //set PRESCALER 1024
 33c:	25 e0       	ldi	r18, 0x05	; 5
 33e:	20 93 81 00 	sts	0x0081, r18
		
		while (((readed=*(UCSRA)) & RX_COMPLETE )==0){
 342:	dc 01       	movw	r26, r24
 344:	ed 91       	ld	r30, X+
 346:	fc 91       	ld	r31, X
 348:	08 c0       	rjmp	.+16     	; 0x35a <_ZNK4Rosa7UartStd4readEhPh+0x48>
			if(TIFR1 & (1<<OCF1A)){ //Check for compare flag each cycle
 34a:	b1 9b       	sbis	0x16, 1	; 22
 34c:	06 c0       	rjmp	.+12     	; 0x35a <_ZNK4Rosa7UartStd4readEhPh+0x48>
				TCCR1B = 0; //set NO CLOCK
 34e:	10 92 81 00 	sts	0x0081, r1
				TIFR1 = 1<<OCF1A;
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	86 bb       	out	0x16, r24	; 22
				return false;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
		if(TIFR1 & (1<<OCF1A))
		TIFR1 = 1<<OCF1A; //Clear compare flag
		
		TCCR1B = 0b101; //set PRESCALER 1024
		
		while (((readed=*(UCSRA)) & RX_COMPLETE )==0){
 35a:	20 81       	ld	r18, Z
 35c:	22 23       	and	r18, r18
 35e:	ac f7       	brge	.-22     	; 0x34a <_ZNK4Rosa7UartStd4readEhPh+0x38>
				TCCR1B = 0; //set NO CLOCK
				TIFR1 = 1<<OCF1A;
				return false;
			}
		}
	TCCR1B = 0; //set NO CLOCK}
 360:	10 92 81 00 	sts	0x0081, r1

	*data = *UDR;
 364:	dc 01       	movw	r26, r24
 366:	18 96       	adiw	r26, 0x08	; 8
 368:	ed 91       	ld	r30, X+
 36a:	fc 91       	ld	r31, X
 36c:	19 97       	sbiw	r26, 0x09	; 9
 36e:	80 81       	ld	r24, Z
 370:	fa 01       	movw	r30, r20
 372:	80 83       	st	Z, r24
	
	if (readed & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))
 374:	2c 71       	andi	r18, 0x1C	; 28
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	09 f0       	breq	.+2      	; 0x37c <_ZNK4Rosa7UartStd4readEhPh+0x6a>
 37a:	80 e0       	ldi	r24, 0x00	; 0
	return false;
	
	return true;
}
 37c:	08 95       	ret

0000037e <_ZNK4Rosa7UartStd11read_streamERhPhh>:

void UartStd::read_stream( uint8_t& size , uint8_t* data, uint8_t timeout_byte) const
{
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	8c 01       	movw	r16, r24
 390:	eb 01       	movw	r28, r22
 392:	7a 01       	movw	r14, r20
 394:	c2 2e       	mov	r12, r18
	uint8_t sizemax = size;
 396:	d8 80       	ld	r13, Y
	
	data[0]=read();
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZNK4Rosa7UartStd4readEPb>
 3a0:	f7 01       	movw	r30, r14
 3a2:	80 83       	st	Z, r24
	
	for(size = 1; size < sizemax; size++)
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	88 83       	st	Y, r24
 3a8:	8d 15       	cp	r24, r13
 3aa:	70 f4       	brcc	.+28     	; 0x3c8 <_ZNK4Rosa7UartStd11read_streamERhPhh+0x4a>
	if(!read(timeout_byte,data+size))
 3ac:	a7 01       	movw	r20, r14
 3ae:	48 0f       	add	r20, r24
 3b0:	51 1d       	adc	r21, r1
 3b2:	6c 2d       	mov	r22, r12
 3b4:	c8 01       	movw	r24, r16
 3b6:	0e 94 89 01 	call	0x312	; 0x312 <_ZNK4Rosa7UartStd4readEhPh>
 3ba:	88 23       	and	r24, r24
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <_ZNK4Rosa7UartStd11read_streamERhPhh+0x4a>
{
	uint8_t sizemax = size;
	
	data[0]=read();
	
	for(size = 1; size < sizemax; size++)
 3be:	88 81       	ld	r24, Y
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	88 83       	st	Y, r24
 3c4:	8d 15       	cp	r24, r13
 3c6:	90 f3       	brcs	.-28     	; 0x3ac <_ZNK4Rosa7UartStd11read_streamERhPhh+0x2e>
	if(!read(timeout_byte,data+size))
	break;
	
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <_ZNK4Rosa7UartStd4sendEh>:

void UartStd::send(uint8_t data) const{
 3da:	dc 01       	movw	r26, r24
	*(UCSRA) |= (1<<TXC);
 3dc:	ed 91       	ld	r30, X+
 3de:	fc 91       	ld	r31, X
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	80 81       	ld	r24, Z
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	80 83       	st	Z, r24
	while ((*(UCSRA) & DATA_REGISTER_EMPTY)==0);
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	11 97       	sbiw	r26, 0x01	; 1
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <_ZNK4Rosa7UartStd4sendEh+0x14>
	*(UDR) = data;
 3f4:	18 96       	adiw	r26, 0x08	; 8
 3f6:	ed 91       	ld	r30, X+
 3f8:	fc 91       	ld	r31, X
 3fa:	19 97       	sbiw	r26, 0x09	; 9
 3fc:	60 83       	st	Z, r22
 3fe:	08 95       	ret

00000400 <_ZNK4Rosa7UartStd16transmit_ongoingEv>:
}

bool UartStd::transmit_ongoing( void ) const
{
	if ((*(UCSRA) & (1<<TXC)) == 0)
 400:	dc 01       	movw	r26, r24
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	80 81       	ld	r24, Z
 408:	86 ff       	sbrs	r24, 6
 40a:	05 c0       	rjmp	.+10     	; 0x416 <_ZNK4Rosa7UartStd16transmit_ongoingEv+0x16>
	return true;
	else {
		*(UCSRA) |= (1<<TXC);
 40c:	80 81       	ld	r24, Z
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	80 83       	st	Z, r24
		return false;
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
}

bool UartStd::transmit_ongoing( void ) const
{
	if ((*(UCSRA) & (1<<TXC)) == 0)
	return true;
 416:	81 e0       	ldi	r24, 0x01	; 1
	else {
		*(UCSRA) |= (1<<TXC);
		return false;
	}

}
 418:	08 95       	ret

0000041a <_ZNK4Rosa7UartStd5flushEv>:

void UartStd::flush( void ) const
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
	uint8_t dummy;
	while (*UCSRA & RX_COMPLETE)
 41e:	dc 01       	movw	r26, r24
 420:	ed 91       	ld	r30, X+
 422:	fc 91       	ld	r31, X
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	20 81       	ld	r18, Z
 428:	22 23       	and	r18, r18
 42a:	44 f4       	brge	.+16     	; 0x43c <_ZNK4Rosa7UartStd5flushEv+0x22>
	dummy = *UDR;
 42c:	18 96       	adiw	r26, 0x08	; 8
 42e:	0d 90       	ld	r0, X+
 430:	bc 91       	ld	r27, X
 432:	a0 2d       	mov	r26, r0
 434:	8c 91       	ld	r24, X
}

void UartStd::flush( void ) const
{
	uint8_t dummy;
	while (*UCSRA & RX_COMPLETE)
 436:	80 81       	ld	r24, Z
 438:	88 23       	and	r24, r24
 43a:	e4 f3       	brlt	.-8      	; 0x434 <_ZNK4Rosa7UartStd5flushEv+0x1a>
	dummy = *UDR;
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <_ZNK4Rosa7UartStd11send_streamEhPh>:

void UartStd::send_stream(uint8_t size , uint8_t* data) const
{
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	8c 01       	movw	r16, r24
 450:	e6 2e       	mov	r14, r22
	for(uint8_t i=0; i < size; i++)
 452:	66 23       	and	r22, r22
 454:	51 f0       	breq	.+20     	; 0x46a <_ZNK4Rosa7UartStd11send_streamEhPh+0x28>
 456:	c4 2f       	mov	r28, r20
 458:	d5 2f       	mov	r29, r21
 45a:	f1 2c       	mov	r15, r1
	send(data[i]);
 45c:	69 91       	ld	r22, Y+
 45e:	c8 01       	movw	r24, r16
 460:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZNK4Rosa7UartStd4sendEh>
	dummy = *UDR;
}

void UartStd::send_stream(uint8_t size , uint8_t* data) const
{
	for(uint8_t i=0; i < size; i++)
 464:	f3 94       	inc	r15
 466:	fe 10       	cpse	r15, r14
 468:	f9 cf       	rjmp	.-14     	; 0x45c <_ZNK4Rosa7UartStd11send_streamEhPh+0x1a>
	send(data[i]);
	
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	08 95       	ret

00000478 <_GLOBAL__sub_I__ZN4Rosa5UART1E>:



 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
		volatile uint8_t* uart_UDR):
		UCSRA(uart_UCSRA),
		UCSRB(uart_UCSRB),
		UCSRC(uart_UCSRC),
		UBRR(uart_UBRR),
		UDR(uart_UDR){
 480:	88 ec       	ldi	r24, 0xC8	; 200
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 13 01 	sts	0x0113, r25
 488:	80 93 12 01 	sts	0x0112, r24
 48c:	89 ec       	ldi	r24, 0xC9	; 201
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 15 01 	sts	0x0115, r25
 494:	80 93 14 01 	sts	0x0114, r24
 498:	8a ec       	ldi	r24, 0xCA	; 202
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 17 01 	sts	0x0117, r25
 4a0:	80 93 16 01 	sts	0x0116, r24
 4a4:	8c ec       	ldi	r24, 0xCC	; 204
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 19 01 	sts	0x0119, r25
 4ac:	80 93 18 01 	sts	0x0118, r24
 4b0:	8e ec       	ldi	r24, 0xCE	; 206
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	90 93 1b 01 	sts	0x011B, r25
 4b8:	80 93 1a 01 	sts	0x011A, r24
			config = (UartConfig*) malloc(sizeof(UartConfig));
 4bc:	88 e0       	ldi	r24, 0x08	; 8
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <malloc>
 4c4:	fc 01       	movw	r30, r24
 4c6:	90 93 1d 01 	sts	0x011D, r25
 4ca:	80 93 1c 01 	sts	0x011C, r24
			config->baud = 250000;
 4ce:	0f 2e       	mov	r0, r31
 4d0:	f0 e9       	ldi	r31, 0x90	; 144
 4d2:	cf 2e       	mov	r12, r31
 4d4:	f0 ed       	ldi	r31, 0xD0	; 208
 4d6:	df 2e       	mov	r13, r31
 4d8:	f3 e0       	ldi	r31, 0x03	; 3
 4da:	ef 2e       	mov	r14, r31
 4dc:	f1 2c       	mov	r15, r1
 4de:	f0 2d       	mov	r31, r0
 4e0:	c0 82       	st	Z, r12
 4e2:	d1 82       	std	Z+1, r13	; 0x01
 4e4:	e2 82       	std	Z+2, r14	; 0x02
 4e6:	f3 82       	std	Z+3, r15	; 0x03
			config->parity = false;
 4e8:	14 82       	std	Z+4, r1	; 0x04
			config->stopbit = 0;
 4ea:	15 82       	std	Z+5, r1	; 0x05
			config->interrupt = NULL;
 4ec:	17 82       	std	Z+7, r1	; 0x07
 4ee:	16 82       	std	Z+6, r1	; 0x06
		volatile uint8_t* uart_UDR):
		UCSRA(uart_UCSRA),
		UCSRB(uart_UCSRB),
		UCSRC(uart_UCSRC),
		UBRR(uart_UBRR),
		UDR(uart_UDR){
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 07 01 	sts	0x0107, r25
 4f8:	80 93 06 01 	sts	0x0106, r24
 4fc:	81 ec       	ldi	r24, 0xC1	; 193
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 09 01 	sts	0x0109, r25
 504:	80 93 08 01 	sts	0x0108, r24
 508:	82 ec       	ldi	r24, 0xC2	; 194
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	90 93 0b 01 	sts	0x010B, r25
 510:	80 93 0a 01 	sts	0x010A, r24
 514:	84 ec       	ldi	r24, 0xC4	; 196
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 0d 01 	sts	0x010D, r25
 51c:	80 93 0c 01 	sts	0x010C, r24
 520:	86 ec       	ldi	r24, 0xC6	; 198
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 0f 01 	sts	0x010F, r25
 528:	80 93 0e 01 	sts	0x010E, r24
			config = (UartConfig*) malloc(sizeof(UartConfig));
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <malloc>
 534:	fc 01       	movw	r30, r24
 536:	90 93 11 01 	sts	0x0111, r25
 53a:	80 93 10 01 	sts	0x0110, r24
			config->baud = 250000;
 53e:	c0 82       	st	Z, r12
 540:	d1 82       	std	Z+1, r13	; 0x01
 542:	e2 82       	std	Z+2, r14	; 0x02
 544:	f3 82       	std	Z+3, r15	; 0x03
			config->parity = false;
 546:	14 82       	std	Z+4, r1	; 0x04
			config->stopbit = 0;
 548:	15 82       	std	Z+5, r1	; 0x05
			config->interrupt = NULL;
 54a:	17 82       	std	Z+7, r1	; 0x07
 54c:	16 82       	std	Z+6, r1	; 0x06
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	08 95       	ret

00000558 <_Z16setAllRelaysROSAv>:
		}
	}
	else{return;}
}
void setAllRelaysROSA()
{
 558:	cf 93       	push	r28
	relaysMask1 = relaysMask1&configMask1;
 55a:	90 91 4c 01 	lds	r25, 0x014C
 55e:	80 91 4e 01 	lds	r24, 0x014E
 562:	89 23       	and	r24, r25
 564:	80 93 4c 01 	sts	0x014C, r24
	relaysMask2 = relaysMask2&configMask2;
 568:	60 91 4d 01 	lds	r22, 0x014D
 56c:	80 91 4b 01 	lds	r24, 0x014B
 570:	68 23       	and	r22, r24
 572:	60 93 4b 01 	sts	0x014B, r22
	
	//Relay01=((relaysMask2 & (1<<1))==0x00);
	//Relay01.unset();
	Relay02=((relaysMask2 & (1<<2))==0x00);
 576:	c1 e0       	ldi	r28, 0x01	; 1
 578:	62 fb       	bst	r22, 2
 57a:	66 27       	eor	r22, r22
 57c:	60 f9       	bld	r22, 0
 57e:	6c 27       	eor	r22, r28
 580:	88 e4       	ldi	r24, 0x48	; 72
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay03=((relaysMask2 & (1<<3))==0x00);
 588:	60 91 4b 01 	lds	r22, 0x014B
 58c:	63 fb       	bst	r22, 3
 58e:	66 27       	eor	r22, r22
 590:	60 f9       	bld	r22, 0
 592:	6c 27       	eor	r22, r28
 594:	85 e4       	ldi	r24, 0x45	; 69
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay04=((relaysMask2 & (1<<4))==0x00);
 59c:	60 91 4b 01 	lds	r22, 0x014B
 5a0:	62 95       	swap	r22
 5a2:	61 70       	andi	r22, 0x01	; 1
 5a4:	6c 27       	eor	r22, r28
 5a6:	82 e4       	ldi	r24, 0x42	; 66
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay05=((relaysMask2 & (1<<5))==0x00);
 5ae:	60 91 4b 01 	lds	r22, 0x014B
 5b2:	65 fb       	bst	r22, 5
 5b4:	66 27       	eor	r22, r22
 5b6:	60 f9       	bld	r22, 0
 5b8:	6c 27       	eor	r22, r28
 5ba:	8f e3       	ldi	r24, 0x3F	; 63
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay06=((relaysMask2 & (1<<6))==0x00);
 5c2:	60 91 4b 01 	lds	r22, 0x014B
 5c6:	66 fb       	bst	r22, 6
 5c8:	66 27       	eor	r22, r22
 5ca:	60 f9       	bld	r22, 0
 5cc:	6c 27       	eor	r22, r28
 5ce:	8c e3       	ldi	r24, 0x3C	; 60
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay07=((relaysMask2 & (1<<7))==0x00);
 5d6:	60 91 4b 01 	lds	r22, 0x014B
 5da:	60 95       	com	r22
 5dc:	66 1f       	adc	r22, r22
 5de:	66 27       	eor	r22, r22
 5e0:	66 1f       	adc	r22, r22
 5e2:	89 e3       	ldi	r24, 0x39	; 57
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay08=((relaysMask1 & (1<<0))==0x00);
 5ea:	60 91 4c 01 	lds	r22, 0x014C
 5ee:	6c 27       	eor	r22, r28
 5f0:	61 70       	andi	r22, 0x01	; 1
 5f2:	86 e3       	ldi	r24, 0x36	; 54
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay09=((relaysMask1 & (1<<1))==0x00);
 5fa:	60 91 4c 01 	lds	r22, 0x014C
 5fe:	66 95       	lsr	r22
 600:	61 70       	andi	r22, 0x01	; 1
 602:	6c 27       	eor	r22, r28
 604:	83 e3       	ldi	r24, 0x33	; 51
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay10=((relaysMask1 & (1<<2))==0x00);
 60c:	60 91 4c 01 	lds	r22, 0x014C
 610:	62 fb       	bst	r22, 2
 612:	66 27       	eor	r22, r22
 614:	60 f9       	bld	r22, 0
 616:	6c 27       	eor	r22, r28
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay11=((relaysMask1 & (1<<3))==0x00);
 620:	60 91 4c 01 	lds	r22, 0x014C
 624:	63 fb       	bst	r22, 3
 626:	66 27       	eor	r22, r22
 628:	60 f9       	bld	r22, 0
 62a:	6c 27       	eor	r22, r28
 62c:	8d e2       	ldi	r24, 0x2D	; 45
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay12=((relaysMask1 & (1<<4))==0x00);
 634:	60 91 4c 01 	lds	r22, 0x014C
 638:	62 95       	swap	r22
 63a:	61 70       	andi	r22, 0x01	; 1
 63c:	6c 27       	eor	r22, r28
 63e:	8a e2       	ldi	r24, 0x2A	; 42
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
}
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <_Z15ROSAPortsConfigv>:
	//PORTA= 0b11111111;
	//DDRA= 0b11111111;

	// Port B initialization
	// Func7=NC Func6=NC Func5=NC Func4=NC Func3=AD_DOUT Func2=AD_DIN Func1=AD_SCLK Func0=AD_CS#
	PORTB=0b00000000;
 64a:	15 b8       	out	0x05, r1	; 5
	DDRB= 0b00000111;
 64c:	87 e0       	ldi	r24, 0x07	; 7
 64e:	84 b9       	out	0x04, r24	; 4
// 	PORTC=0b00011111;
// 	DDRC=0b01011111;

	// Port D initialization
	// NC
	PORTD=0x00;
 650:	1b b8       	out	0x0b, r1	; 11
	DDRD=0x00;
 652:	1a b8       	out	0x0a, r1	; 10

	// Port E initialization
	// NC
	PORTE=0x00;
 654:	1e b8       	out	0x0e, r1	; 14
	DDRE=0x00;
 656:	1d b8       	out	0x0d, r1	; 13

	// Port F initialization
	// Func7=NC Func6=Left_Inclinometer Func5=Right_Inclinometer Func4=Key_Inclinometer Func3=ADC_5V Func2=ADC_12V Func1=Base_Inclinometer Func0=ADC_24V
	PORTF=0x00;
 658:	11 ba       	out	0x11, r1	; 17
	DDRF=0x00;
 65a:	10 ba       	out	0x10, r1	; 16

	// Port G initialization
	// NC
	PORTG=0x00;
 65c:	14 ba       	out	0x14, r1	; 20
	DDRG=0x00;
 65e:	13 ba       	out	0x13, r1	; 19
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=FFh
	// OC0 output: Disconnected
	TCCR0A=0x00;
 660:	14 bc       	out	0x24, r1	; 36
	TCNT0=0x00;
 662:	16 bc       	out	0x26, r1	; 38
	OCR0A=0x00;
 664:	17 bc       	out	0x27, r1	; 39
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=0x00;
 666:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x00;
 66a:	10 92 81 00 	sts	0x0081, r1
	TCNT1H=0x00;
 66e:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0x00;
 672:	10 92 84 00 	sts	0x0084, r1
	ICR1H=0x00;
 676:	10 92 87 00 	sts	0x0087, r1
	ICR1L=0x00;
 67a:	10 92 86 00 	sts	0x0086, r1
	OCR1AH=0x00;
 67e:	10 92 89 00 	sts	0x0089, r1
	OCR1AL=0x00;
 682:	10 92 88 00 	sts	0x0088, r1
	OCR1BH=0x00;
 686:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL=0x00;
 68a:	10 92 8a 00 	sts	0x008A, r1
	OCR1CH=0x00;
 68e:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL=0x00;
 692:	10 92 8c 00 	sts	0x008C, r1
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
 696:	10 92 b6 00 	sts	0x00B6, r1
	TCCR2A=0x00;
 69a:	10 92 b0 00 	sts	0x00B0, r1
	TCNT2=0x00;
 69e:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A=0x00;
 6a2:	10 92 b3 00 	sts	0x00B3, r1
	// Timer 3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=0x00;
 6a6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=0x00;
 6aa:	10 92 91 00 	sts	0x0091, r1
	TCNT3H=0x00;
 6ae:	10 92 95 00 	sts	0x0095, r1
	TCNT3L=0x00;
 6b2:	10 92 94 00 	sts	0x0094, r1
	ICR3H=0x00;
 6b6:	10 92 97 00 	sts	0x0097, r1
	ICR3L=0x00;
 6ba:	10 92 96 00 	sts	0x0096, r1
	OCR3AH=0x00;
 6be:	10 92 99 00 	sts	0x0099, r1
	OCR3AL=0x00;
 6c2:	10 92 98 00 	sts	0x0098, r1
	OCR3BH=0x00;
 6c6:	10 92 9b 00 	sts	0x009B, r1
	OCR3BL=0x00;
 6ca:	10 92 9a 00 	sts	0x009A, r1
	OCR3CH=0x00;
 6ce:	10 92 9d 00 	sts	0x009D, r1
	OCR3CL=0x00;
 6d2:	10 92 9c 00 	sts	0x009C, r1
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: Off
	// INT7: Off
	EICRA=0x00;
 6d6:	10 92 69 00 	sts	0x0069, r1
	EICRB=0x00;
 6da:	10 92 6a 00 	sts	0x006A, r1
	EIMSK=0x00;
 6de:	1d ba       	out	0x1d, r1	; 29

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=0x00;
 6e0:	10 92 6e 00 	sts	0x006E, r1
	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=0x00;
 6e4:	10 92 6f 00 	sts	0x006F, r1
	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=0x00;
 6e8:	10 92 70 00 	sts	0x0070, r1
	// Timer/Counter 3 Interrupt(s) initialization
	TIMSK3=0x00;
 6ec:	10 92 71 00 	sts	0x0071, r1
	// 	UBRR1L=0x33;

	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	ACSR=0x80;
 6f0:	80 e8       	ldi	r24, 0x80	; 128
 6f2:	80 bf       	out	0x30, r24	; 48
	ADCSRB=0x00;
 6f4:	10 92 7b 00 	sts	0x007B, r1
	//SHT_ConnectionRest(); //T/H sensor
	
	// CAN Controller initialization
	// CAN: Off
	CANGCON=0x00;
 6f8:	10 92 d8 00 	sts	0x00D8, r1
	
	// deviceConfig and relays initialization
	configMask1=0xFF; configMask2=0xFE;
 6fc:	9f ef       	ldi	r25, 0xFF	; 255
 6fe:	90 93 4e 01 	sts	0x014E, r25
 702:	8e ef       	ldi	r24, 0xFE	; 254
 704:	80 93 4d 01 	sts	0x014D, r24
	relaysMask1=0xFF; relaysMask2=0xFE;
 708:	90 93 4c 01 	sts	0x014C, r25
 70c:	80 93 4b 01 	sts	0x014B, r24
	
	setAllRelaysROSA();
 710:	0e 94 ac 02 	call	0x558	; 0x558 <_Z16setAllRelaysROSAv>
 714:	08 95       	ret

00000716 <_GLOBAL__sub_I_buffer_dados>:
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 716:	e8 e4       	ldi	r30, 0x48	; 72
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	82 e2       	ldi	r24, 0x22	; 34
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	91 83       	std	Z+1, r25	; 0x01
 720:	80 83       	st	Z, r24
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	20 93 4a 01 	sts	0x014A, r18
		if(initial)
		*pt |= 1<<wbit;
 728:	11 9a       	sbi	0x02, 1	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 72a:	01 90       	ld	r0, Z+
 72c:	f0 81       	ld	r31, Z
 72e:	e0 2d       	mov	r30, r0
 730:	32 91       	ld	r19, -Z
 732:	32 60       	ori	r19, 0x02	; 2
 734:	30 83       	st	Z, r19
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 736:	e5 e4       	ldi	r30, 0x45	; 69
 738:	f1 e0       	ldi	r31, 0x01	; 1
 73a:	91 83       	std	Z+1, r25	; 0x01
 73c:	80 83       	st	Z, r24
 73e:	32 e0       	ldi	r19, 0x02	; 2
 740:	30 93 47 01 	sts	0x0147, r19
		if(initial)
		*pt |= 1<<wbit;
 744:	12 9a       	sbi	0x02, 2	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 746:	01 90       	ld	r0, Z+
 748:	f0 81       	ld	r31, Z
 74a:	e0 2d       	mov	r30, r0
 74c:	42 91       	ld	r20, -Z
 74e:	44 60       	ori	r20, 0x04	; 4
 750:	40 83       	st	Z, r20
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 752:	e2 e4       	ldi	r30, 0x42	; 66
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	91 83       	std	Z+1, r25	; 0x01
 758:	80 83       	st	Z, r24
 75a:	43 e0       	ldi	r20, 0x03	; 3
 75c:	40 93 44 01 	sts	0x0144, r20
		if(initial)
		*pt |= 1<<wbit;
 760:	13 9a       	sbi	0x02, 3	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 762:	01 90       	ld	r0, Z+
 764:	f0 81       	ld	r31, Z
 766:	e0 2d       	mov	r30, r0
 768:	52 91       	ld	r21, -Z
 76a:	58 60       	ori	r21, 0x08	; 8
 76c:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 76e:	ef e3       	ldi	r30, 0x3F	; 63
 770:	f1 e0       	ldi	r31, 0x01	; 1
 772:	91 83       	std	Z+1, r25	; 0x01
 774:	80 83       	st	Z, r24
 776:	54 e0       	ldi	r21, 0x04	; 4
 778:	50 93 41 01 	sts	0x0141, r21
		if(initial)
		*pt |= 1<<wbit;
 77c:	14 9a       	sbi	0x02, 4	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 77e:	01 90       	ld	r0, Z+
 780:	f0 81       	ld	r31, Z
 782:	e0 2d       	mov	r30, r0
 784:	52 91       	ld	r21, -Z
 786:	50 61       	ori	r21, 0x10	; 16
 788:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 78a:	ec e3       	ldi	r30, 0x3C	; 60
 78c:	f1 e0       	ldi	r31, 0x01	; 1
 78e:	91 83       	std	Z+1, r25	; 0x01
 790:	80 83       	st	Z, r24
 792:	55 e0       	ldi	r21, 0x05	; 5
 794:	50 93 3e 01 	sts	0x013E, r21
		if(initial)
		*pt |= 1<<wbit;
 798:	15 9a       	sbi	0x02, 5	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 79a:	01 90       	ld	r0, Z+
 79c:	f0 81       	ld	r31, Z
 79e:	e0 2d       	mov	r30, r0
 7a0:	52 91       	ld	r21, -Z
 7a2:	50 62       	ori	r21, 0x20	; 32
 7a4:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 7a6:	e9 e3       	ldi	r30, 0x39	; 57
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	91 83       	std	Z+1, r25	; 0x01
 7ac:	80 83       	st	Z, r24
 7ae:	56 e0       	ldi	r21, 0x06	; 6
 7b0:	50 93 3b 01 	sts	0x013B, r21
		if(initial)
		*pt |= 1<<wbit;
 7b4:	16 9a       	sbi	0x02, 6	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 7b6:	01 90       	ld	r0, Z+
 7b8:	f0 81       	ld	r31, Z
 7ba:	e0 2d       	mov	r30, r0
 7bc:	52 91       	ld	r21, -Z
 7be:	50 64       	ori	r21, 0x40	; 64
 7c0:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 7c2:	e6 e3       	ldi	r30, 0x36	; 54
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	91 83       	std	Z+1, r25	; 0x01
 7c8:	80 83       	st	Z, r24
 7ca:	87 e0       	ldi	r24, 0x07	; 7
 7cc:	80 93 38 01 	sts	0x0138, r24
		if(initial)
		*pt |= 1<<wbit;
 7d0:	17 9a       	sbi	0x02, 7	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 7d2:	01 90       	ld	r0, Z+
 7d4:	f0 81       	ld	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	82 91       	ld	r24, -Z
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	80 83       	st	Z, r24
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 7de:	e3 e3       	ldi	r30, 0x33	; 51
 7e0:	f1 e0       	ldi	r31, 0x01	; 1
 7e2:	88 e2       	ldi	r24, 0x28	; 40
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	91 83       	std	Z+1, r25	; 0x01
 7e8:	80 83       	st	Z, r24
 7ea:	10 92 35 01 	sts	0x0135, r1
		if(initial)
		*pt |= 1<<wbit;
 7ee:	40 9a       	sbi	0x08, 0	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 7f0:	01 90       	ld	r0, Z+
 7f2:	f0 81       	ld	r31, Z
 7f4:	e0 2d       	mov	r30, r0
 7f6:	52 91       	ld	r21, -Z
 7f8:	51 60       	ori	r21, 0x01	; 1
 7fa:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 7fc:	e0 e3       	ldi	r30, 0x30	; 48
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	91 83       	std	Z+1, r25	; 0x01
 802:	80 83       	st	Z, r24
 804:	20 93 32 01 	sts	0x0132, r18
		if(initial)
		*pt |= 1<<wbit;
 808:	41 9a       	sbi	0x08, 1	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 80a:	01 90       	ld	r0, Z+
 80c:	f0 81       	ld	r31, Z
 80e:	e0 2d       	mov	r30, r0
 810:	52 91       	ld	r21, -Z
 812:	52 60       	ori	r21, 0x02	; 2
 814:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 816:	ed e2       	ldi	r30, 0x2D	; 45
 818:	f1 e0       	ldi	r31, 0x01	; 1
 81a:	91 83       	std	Z+1, r25	; 0x01
 81c:	80 83       	st	Z, r24
 81e:	30 93 2f 01 	sts	0x012F, r19
		if(initial)
		*pt |= 1<<wbit;
 822:	42 9a       	sbi	0x08, 2	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 824:	01 90       	ld	r0, Z+
 826:	f0 81       	ld	r31, Z
 828:	e0 2d       	mov	r30, r0
 82a:	52 91       	ld	r21, -Z
 82c:	54 60       	ori	r21, 0x04	; 4
 82e:	50 83       	st	Z, r21
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 830:	ea e2       	ldi	r30, 0x2A	; 42
 832:	f1 e0       	ldi	r31, 0x01	; 1
 834:	91 83       	std	Z+1, r25	; 0x01
 836:	80 83       	st	Z, r24
 838:	40 93 2c 01 	sts	0x012C, r20
		if(initial)
		*pt |= 1<<wbit;
 83c:	43 9a       	sbi	0x08, 3	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 83e:	01 90       	ld	r0, Z+
 840:	f0 81       	ld	r31, Z
 842:	e0 2d       	mov	r30, r0
 844:	82 91       	ld	r24, -Z
 846:	88 60       	ori	r24, 0x08	; 8
 848:	80 83       	st	Z, r24
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 84a:	e7 e2       	ldi	r30, 0x27	; 39
 84c:	f1 e0       	ldi	r31, 0x01	; 1
 84e:	85 e2       	ldi	r24, 0x25	; 37
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	91 83       	std	Z+1, r25	; 0x01
 854:	80 83       	st	Z, r24
 856:	40 93 29 01 	sts	0x0129, r20
		if(initial)
		*pt |= 1<<wbit;
 85a:	2b 9a       	sbi	0x05, 3	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 85c:	01 90       	ld	r0, Z+
 85e:	f0 81       	ld	r31, Z
 860:	e0 2d       	mov	r30, r0
 862:	42 91       	ld	r20, -Z
 864:	48 60       	ori	r20, 0x08	; 8
 866:	40 83       	st	Z, r20
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 868:	e4 e2       	ldi	r30, 0x24	; 36
 86a:	f1 e0       	ldi	r31, 0x01	; 1
 86c:	91 83       	std	Z+1, r25	; 0x01
 86e:	80 83       	st	Z, r24
 870:	30 93 26 01 	sts	0x0126, r19
		if(initial)
		*pt |= 1<<wbit;
 874:	2a 9a       	sbi	0x05, 2	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 876:	01 90       	ld	r0, Z+
 878:	f0 81       	ld	r31, Z
 87a:	e0 2d       	mov	r30, r0
 87c:	32 91       	ld	r19, -Z
 87e:	34 60       	ori	r19, 0x04	; 4
 880:	30 83       	st	Z, r19
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 882:	e1 e2       	ldi	r30, 0x21	; 33
 884:	f1 e0       	ldi	r31, 0x01	; 1
 886:	91 83       	std	Z+1, r25	; 0x01
 888:	80 83       	st	Z, r24
 88a:	20 93 23 01 	sts	0x0123, r18
		if(initial)
		*pt |= 1<<wbit;
 88e:	29 9a       	sbi	0x05, 1	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 890:	01 90       	ld	r0, Z+
 892:	f0 81       	ld	r31, Z
 894:	e0 2d       	mov	r30, r0
 896:	22 91       	ld	r18, -Z
 898:	22 60       	ori	r18, 0x02	; 2
 89a:	20 83       	st	Z, r18
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 89c:	ee e1       	ldi	r30, 0x1E	; 30
 89e:	f1 e0       	ldi	r31, 0x01	; 1
 8a0:	91 83       	std	Z+1, r25	; 0x01
 8a2:	80 83       	st	Z, r24
 8a4:	10 92 20 01 	sts	0x0120, r1
		if(initial)
		*pt |= 1<<wbit;
 8a8:	28 9a       	sbi	0x05, 0	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 8aa:	01 90       	ld	r0, Z+
 8ac:	f0 81       	ld	r31, Z
 8ae:	e0 2d       	mov	r30, r0
 8b0:	82 91       	ld	r24, -Z
 8b2:	81 60       	ori	r24, 0x01	; 1
 8b4:	80 83       	st	Z, r24
 8b6:	08 95       	ret

000008b8 <main>:
#include "UartRosa.h"
#include "Velki485.h"
using namespace Rosa;

int main(void)
{
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	6b 97       	sbiw	r28, 0x1b	; 27
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
	
	// Crystal Oscillator division factor: 1	
	CLKPR=0x80;
 8cc:	e1 e6       	ldi	r30, 0x61	; 97
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 e8       	ldi	r24, 0x80	; 128
 8d2:	80 83       	st	Z, r24
	CLKPR=0x00;
 8d4:	10 82       	st	Z, r1
	
	
	ROSAPortsConfig();
 8d6:	0e 94 25 03 	call	0x64a	; 0x64a <_Z15ROSAPortsConfigv>
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 8da:	28 e2       	ldi	r18, 0x28	; 40
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	3e 8b       	std	Y+22, r19	; 0x16
 8e0:	2d 8b       	std	Y+21, r18	; 0x15
 8e2:	84 e0       	ldi	r24, 0x04	; 4
 8e4:	8f 8b       	std	Y+23, r24	; 0x17
		if(initial)
		*pt |= 1<<wbit;
 8e6:	44 9a       	sbi	0x08, 4	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 8e8:	ed 89       	ldd	r30, Y+21	; 0x15
 8ea:	fe 89       	ldd	r31, Y+22	; 0x16
 8ec:	62 91       	ld	r22, -Z
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	ac 01       	movw	r20, r24
 8f4:	0f 88       	ldd	r0, Y+23	; 0x17
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <main+0x44>
 8f8:	44 0f       	add	r20, r20
 8fa:	55 1f       	adc	r21, r21
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <main+0x40>
 900:	46 2b       	or	r20, r22
 902:	40 83       	st	Z, r20
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
 904:	3b 8b       	std	Y+19, r19	; 0x13
 906:	2a 8b       	std	Y+18, r18	; 0x12
 908:	25 e0       	ldi	r18, 0x05	; 5
 90a:	2c 8b       	std	Y+20, r18	; 0x14
		if(initial)
		*pt |= 1<<wbit;
 90c:	45 9a       	sbi	0x08, 5	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 90e:	ea 89       	ldd	r30, Y+18	; 0x12
 910:	fb 89       	ldd	r31, Y+19	; 0x13
 912:	22 91       	ld	r18, -Z
 914:	0c 88       	ldd	r0, Y+20	; 0x14
 916:	02 c0       	rjmp	.+4      	; 0x91c <main+0x64>
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	0a 94       	dec	r0
 91e:	e2 f7       	brpl	.-8      	; 0x918 <main+0x60>
 920:	82 2b       	or	r24, r18
 922:	80 83       	st	Z, r24
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
		if(initial)
		*pt |= 1<<wbit;
 924:	46 9a       	sbi	0x08, 6	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 926:	3e 9a       	sbi	0x07, 6	; 7
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
		if(initial)
		*pt |= 1<<wbit;
 928:	10 9a       	sbi	0x02, 0	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
 92a:	08 9a       	sbi	0x01, 0	; 1

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
	
	inline OutBit unset(){*pt = *pt & ~(1<<wbit);	return *this;}
 92c:	10 98       	cbi	0x02, 0	; 2
 92e:	46 98       	cbi	0x08, 6	; 8
 930:	82 e3       	ldi	r24, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	31 ee       	ldi	r19, 0xE1	; 225
 936:	94 e0       	ldi	r25, 0x04	; 4
 938:	21 50       	subi	r18, 0x01	; 1
 93a:	30 40       	sbci	r19, 0x00	; 0
 93c:	90 40       	sbci	r25, 0x00	; 0
 93e:	e1 f7       	brne	.-8      	; 0x938 <main+0x80>
 940:	00 c0       	rjmp	.+0      	; 0x942 <main+0x8a>
 942:	00 00       	nop
 944:	81 50       	subi	r24, 0x01	; 1
	
	OutBit TX_485_en1(PORTC,4), RX_485_en1(PORTC,5), Eth_rst(PORTC,6), Eth_relay(PORTA,0);
	Eth_relay.unset();
	Eth_rst.unset();
	for(uint8_t i =0; i<50;i++)
 946:	a9 f7       	brne	.-22     	; 0x932 <main+0x7a>
	_delay_ms(200);
	
	uint8_t msg[3] = {0xAB, 0xCD, 0xEF};
	uint8_t msg2[2] = {0xA5, 0xB6};
	UART1.enable();
 948:	82 e1       	ldi	r24, 0x12	; 18
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	0e 94 33 01 	call	0x266	; 0x266 <_ZNK4Rosa7UartStd6enableEv>
	UART0.enable();
 950:	86 e0       	ldi	r24, 0x06	; 6
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	0e 94 33 01 	call	0x266	; 0x266 <_ZNK4Rosa7UartStd6enableEv>
		//functions
		public:
		Rs485Std(const UartStd& uart485, OutBit& tx_enable_485, OutBit& rx_enable_485):
		uart(&uart485),
		tx_enable(&tx_enable_485),
		rx_enable(&rx_enable_485){
 958:	86 e0       	ldi	r24, 0x06	; 6
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	9c 87       	std	Y+12, r25	; 0x0c
 95e:	8b 87       	std	Y+11, r24	; 0x0b
 960:	ce 01       	movw	r24, r28
 962:	45 96       	adiw	r24, 0x15	; 21
 964:	9e 87       	std	Y+14, r25	; 0x0e
 966:	8d 87       	std	Y+13, r24	; 0x0d
 968:	03 97       	sbiw	r24, 0x03	; 3
 96a:	98 8b       	std	Y+16, r25	; 0x10
 96c:	8f 87       	std	Y+15, r24	; 0x0f
 96e:	ed 89       	ldd	r30, Y+21	; 0x15
 970:	fe 89       	ldd	r31, Y+22	; 0x16
 972:	40 81       	ld	r20, Z
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	9c 01       	movw	r18, r24
 97a:	0f 88       	ldd	r0, Y+23	; 0x17
 97c:	02 c0       	rjmp	.+4      	; 0x982 <main+0xca>
 97e:	22 0f       	add	r18, r18
 980:	33 1f       	adc	r19, r19
 982:	0a 94       	dec	r0
 984:	e2 f7       	brpl	.-8      	; 0x97e <main+0xc6>
 986:	20 95       	com	r18
 988:	24 23       	and	r18, r20
 98a:	20 83       	st	Z, r18
			tx_enable->unset();
			rx_enable->set();
 98c:	af 85       	ldd	r26, Y+15	; 0x0f
 98e:	b8 89       	ldd	r27, Y+16	; 0x10
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
 990:	ed 91       	ld	r30, X+
 992:	fc 91       	ld	r31, X
 994:	11 97       	sbiw	r26, 0x01	; 1
 996:	20 81       	ld	r18, Z
 998:	12 96       	adiw	r26, 0x02	; 2
 99a:	0c 90       	ld	r0, X
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <main+0xea>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	0a 94       	dec	r0
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <main+0xe6>
 9a6:	82 2b       	or	r24, r18
 9a8:	80 83       	st	Z, r24
		bool initialized; //TO DO
		
		//functions
		public:
		Velki485(const UartStd& uart485, OutBit& tx_enable_485, OutBit& rx_enable_485):
		Rs485Std(uart485,tx_enable_485,rx_enable_485), initialized(false)
 9aa:	19 8a       	std	Y+17, r1	; 0x11
		{
			initialize();
 9ac:	ce 01       	movw	r24, r28
 9ae:	0b 96       	adiw	r24, 0x0b	; 11
 9b0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN4Rosa8Velki48510initializeEv>
	UartRosa pccom = UartRosa(UART1);
	//Rs485Std siow = Rs485Std(UART0,TX_485_en1,RX_485_en1);
	Velki485 velki = Velki485(UART0,TX_485_en1,RX_485_en1);
	uint8_t pressure[9];
	uint8_t readed = 1;
	uint8_t errormsg[2] = {0xEE,0xBB};
 9b4:	8e ee       	ldi	r24, 0xEE	; 238
 9b6:	88 8f       	std	Y+24, r24	; 0x18
 9b8:	8b eb       	ldi	r24, 0xBB	; 187
 9ba:	89 8f       	std	Y+25, r24	; 0x19
	const uint8_t max_command_size = 10;
	const uint8_t max_response_size = 10;
	
	while(1)
	{
		command_size = max_command_size;
 9bc:	0f 2e       	mov	r0, r31
 9be:	fa e0       	ldi	r31, 0x0A	; 10
 9c0:	ff 2e       	mov	r15, r31
 9c2:	f0 2d       	mov	r31, r0
 9c4:	fb 8e       	std	Y+27, r15	; 0x1b
		response_size = max_response_size;
 9c6:	fa 8e       	std	Y+26, r15	; 0x1a
		
		UART1.read_stream(command_size,data,timeout);
 9c8:	22 e0       	ldi	r18, 0x02	; 2
 9ca:	ae 01       	movw	r20, r28
 9cc:	4f 5f       	subi	r20, 0xFF	; 255
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	be 01       	movw	r22, r28
 9d2:	65 5e       	subi	r22, 0xE5	; 229
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	82 e1       	ldi	r24, 0x12	; 18
 9d8:	91 e0       	ldi	r25, 0x01	; 1
 9da:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZNK4Rosa7UartStd11read_streamERhPhh>
		
		if(velki.forward(data,command_size,data,response_size))
 9de:	8e 01       	movw	r16, r28
 9e0:	06 5e       	subi	r16, 0xE6	; 230
 9e2:	1f 4f       	sbci	r17, 0xFF	; 255
 9e4:	9e 01       	movw	r18, r28
 9e6:	2f 5f       	subi	r18, 0xFF	; 255
 9e8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ea:	4b 8d       	ldd	r20, Y+27	; 0x1b
 9ec:	b9 01       	movw	r22, r18
 9ee:	ce 01       	movw	r24, r28
 9f0:	0b 96       	adiw	r24, 0x0b	; 11
 9f2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN4Rosa8Velki4857forwardEPhhS1_Rh>
 9f6:	88 23       	and	r24, r24
 9f8:	49 f0       	breq	.+18     	; 0xa0c <main+0x154>
		UART1.send_stream(response_size,data);
 9fa:	ae 01       	movw	r20, r28
 9fc:	4f 5f       	subi	r20, 0xFF	; 255
 9fe:	5f 4f       	sbci	r21, 0xFF	; 255
 a00:	6a 8d       	ldd	r22, Y+26	; 0x1a
 a02:	82 e1       	ldi	r24, 0x12	; 18
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 21 02 	call	0x442	; 0x442 <_ZNK4Rosa7UartStd11send_streamEhPh>
 a0a:	dc cf       	rjmp	.-72     	; 0x9c4 <main+0x10c>
		else
		UART1.send_stream(2,errormsg);
 a0c:	ae 01       	movw	r20, r28
 a0e:	48 5e       	subi	r20, 0xE8	; 232
 a10:	5f 4f       	sbci	r21, 0xFF	; 255
 a12:	62 e0       	ldi	r22, 0x02	; 2
 a14:	82 e1       	ldi	r24, 0x12	; 18
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	0e 94 21 02 	call	0x442	; 0x442 <_ZNK4Rosa7UartStd11send_streamEhPh>
 a1c:	d3 cf       	rjmp	.-90     	; 0x9c4 <main+0x10c>

00000a1e <_ZN4Rosa8Velki48510initializeEv>:
		return true; // NOT ALL FINE - CHECK STAT pressure_msg[6] BYTE!!
		
	}

	bool Velki485::initialize( void )
	{
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	2f 97       	sbiw	r28, 0x0f	; 15
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	7c 01       	movw	r14, r24
		
		uint8_t SensorInit[4] = {0xfa, 0x30, 0x04, 0x43};// 0xFA = 250 - Broadcast; 0x30 = 48 initialization; 0x0443 - CRC
 a3a:	8a ef       	ldi	r24, 0xFA	; 250
 a3c:	8b 87       	std	Y+11, r24	; 0x0b
 a3e:	80 e3       	ldi	r24, 0x30	; 48
 a40:	8c 87       	std	Y+12, r24	; 0x0c
 a42:	84 e0       	ldi	r24, 0x04	; 4
 a44:	8d 87       	std	Y+13, r24	; 0x0d
 a46:	83 e4       	ldi	r24, 0x43	; 67
 a48:	8e 87       	std	Y+14, r24	; 0x0e
		send_msg(4,SensorInit);
 a4a:	ae 01       	movw	r20, r28
 a4c:	45 5f       	subi	r20, 0xF5	; 245
 a4e:	5f 4f       	sbci	r21, 0xFF	; 255
 a50:	64 e0       	ldi	r22, 0x04	; 4
 a52:	c7 01       	movw	r24, r14
 a54:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN4Rosa8Rs485Std8send_msgEhPh>
		uint8_t answer[10];
		uint8_t received_size = 10;
 a58:	8a e0       	ldi	r24, 0x0A	; 10
 a5a:	8f 87       	std	Y+15, r24	; 0x0f
		
		if(!read_msg(received_size,answer,1.8,100)){
 a5c:	04 e6       	ldi	r16, 0x64	; 100
 a5e:	21 e0       	ldi	r18, 0x01	; 1
 a60:	ae 01       	movw	r20, r28
 a62:	4f 5f       	subi	r20, 0xFF	; 255
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	be 01       	movw	r22, r28
 a68:	61 5f       	subi	r22, 0xF1	; 241
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	c7 01       	movw	r24, r14
 a6e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN4Rosa8Rs485Std8read_msgERhPhhh>
 a72:	81 11       	cpse	r24, r1
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <_ZN4Rosa8Velki48510initializeEv+0x6a>
 a76:	ef ec       	ldi	r30, 0xCF	; 207
 a78:	f7 e0       	ldi	r31, 0x07	; 7
 a7a:	31 97       	sbiw	r30, 0x01	; 1
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <_ZN4Rosa8Velki48510initializeEv+0x5c>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <_ZN4Rosa8Velki48510initializeEv+0x62>
 a80:	00 00       	nop
			_delay_ms(1);
			return (initialized = false);
 a82:	f7 01       	movw	r30, r14
 a84:	16 82       	std	Z+6, r1	; 0x06
 a86:	55 c0       	rjmp	.+170    	; 0xb32 <_ZN4Rosa8Velki48510initializeEv+0x114>
 a88:	ef ec       	ldi	r30, 0xCF	; 207
 a8a:	f7 e0       	ldi	r31, 0x07	; 7
 a8c:	31 97       	sbiw	r30, 0x01	; 1
 a8e:	f1 f7       	brne	.-4      	; 0xa8c <_ZN4Rosa8Velki48510initializeEv+0x6e>
 a90:	00 c0       	rjmp	.+0      	; 0xa92 <_ZN4Rosa8Velki48510initializeEv+0x74>
 a92:	00 00       	nop
		}
		
		_delay_ms(1);
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];
 a94:	2f 85       	ldd	r18, Y+15	; 0x0f
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	b9 01       	movw	r22, r18
 a9a:	62 50       	subi	r22, 0x02	; 2
 a9c:	71 09       	sbc	r23, r1
 a9e:	fe 01       	movw	r30, r28
 aa0:	e6 0f       	add	r30, r22
 aa2:	f7 1f       	adc	r31, r23
 aa4:	e1 81       	ldd	r30, Z+1	; 0x01
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	fe 2f       	mov	r31, r30
 aaa:	ee 27       	eor	r30, r30
 aac:	de 01       	movw	r26, r28
 aae:	a2 0f       	add	r26, r18
 ab0:	b3 1f       	adc	r27, r19
 ab2:	9c 91       	ld	r25, X
 ab4:	e9 0f       	add	r30, r25
 ab6:	f1 1d       	adc	r31, r1

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
 ab8:	16 16       	cp	r1, r22
 aba:	17 06       	cpc	r1, r23
 abc:	0c f0       	brlt	.+2      	; 0xac0 <_ZN4Rosa8Velki48510initializeEv+0xa2>
 abe:	2a c0       	rjmp	.+84     	; 0xb14 <_ZN4Rosa8Velki48510initializeEv+0xf6>
 ac0:	40 e0       	ldi	r20, 0x00	; 0
 ac2:	50 e0       	ldi	r21, 0x00	; 0
 ac4:	90 e0       	ldi	r25, 0x00	; 0
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
 ac6:	2f ef       	ldi	r18, 0xFF	; 255
 ac8:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, answer[i]);
 aca:	a1 e0       	ldi	r26, 0x01	; 1
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	ac 0f       	add	r26, r28
 ad0:	bd 1f       	adc	r27, r29
 ad2:	a4 0f       	add	r26, r20
 ad4:	b5 1f       	adc	r27, r21
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 ad6:	4c 91       	ld	r20, X
 ad8:	24 27       	eor	r18, r20
 ada:	42 2f       	mov	r20, r18
 adc:	42 95       	swap	r20
 ade:	42 27       	eor	r20, r18
 ae0:	04 2e       	mov	r0, r20
 ae2:	46 95       	lsr	r20
 ae4:	46 95       	lsr	r20
 ae6:	40 25       	eor	r20, r0
 ae8:	04 2e       	mov	r0, r20
 aea:	46 95       	lsr	r20
 aec:	40 25       	eor	r20, r0
 aee:	47 70       	andi	r20, 0x07	; 7
 af0:	02 2e       	mov	r0, r18
 af2:	23 2f       	mov	r18, r19
 af4:	46 95       	lsr	r20
 af6:	07 94       	ror	r0
 af8:	47 95       	ror	r20
 afa:	30 2d       	mov	r19, r0
 afc:	24 27       	eor	r18, r20
 afe:	06 94       	lsr	r0
 b00:	47 95       	ror	r20
 b02:	30 25       	eor	r19, r0
 b04:	24 27       	eor	r18, r20
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
 b06:	9f 5f       	subi	r25, 0xFF	; 255
 b08:	49 2f       	mov	r20, r25
 b0a:	50 e0       	ldi	r21, 0x00	; 0
 b0c:	46 17       	cp	r20, r22
 b0e:	57 07       	cpc	r21, r23
 b10:	e4 f2       	brlt	.-72     	; 0xaca <_ZN4Rosa8Velki48510initializeEv+0xac>
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <_ZN4Rosa8Velki48510initializeEv+0xfa>
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
 b14:	2f ef       	ldi	r18, 0xFF	; 255
 b16:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, answer[i]);

		if(CRC != CRCRec || answer[1]!=0x30)
 b18:	2e 17       	cp	r18, r30
 b1a:	3f 07       	cpc	r19, r31
 b1c:	19 f4       	brne	.+6      	; 0xb24 <_ZN4Rosa8Velki48510initializeEv+0x106>
 b1e:	9a 81       	ldd	r25, Y+2	; 0x02
 b20:	90 33       	cpi	r25, 0x30	; 48
 b22:	21 f0       	breq	.+8      	; 0xb2c <_ZN4Rosa8Velki48510initializeEv+0x10e>
		return (initialized = false); //CRC ERROR
 b24:	f7 01       	movw	r30, r14
 b26:	16 82       	std	Z+6, r1	; 0x06
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <_ZN4Rosa8Velki48510initializeEv+0x114>
		
		return (initialized = true);
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	f7 01       	movw	r30, r14
 b30:	96 83       	std	Z+6, r25	; 0x06
	}
 b32:	2f 96       	adiw	r28, 0x0f	; 15
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	de bf       	out	0x3e, r29	; 62
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	cd bf       	out	0x3d, r28	; 61
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	0f 91       	pop	r16
 b44:	ff 90       	pop	r15
 b46:	ef 90       	pop	r14
 b48:	08 95       	ret

00000b4a <_ZN4Rosa8Velki4857forwardEPhhS1_Rh>:

bool Velki485::forward( uint8_t* command, uint8_t command_size, uint8_t* response, uint8_t& response_size )
{
 b4a:	cf 92       	push	r12
 b4c:	df 92       	push	r13
 b4e:	ef 92       	push	r14
 b50:	ff 92       	push	r15
 b52:	0f 93       	push	r16
 b54:	1f 93       	push	r17
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	7c 01       	movw	r14, r24
 b5c:	69 01       	movw	r12, r18
 b5e:	e8 01       	movw	r28, r16
			}
		
		void send_msg(uint8_t data_length, uint8_t *msg);
		uint8_t read_msg(uint8_t data_length, uint8_t *msg);
		bool read_msg( uint8_t& data_length, uint8_t *msg, uint8_t byte_timeout, uint8_t response_timeout);
		void flush(void){uart->flush();}
 b60:	fc 01       	movw	r30, r24
 b62:	80 81       	ld	r24, Z
 b64:	91 81       	ldd	r25, Z+1	; 0x01
 b66:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZNK4Rosa7UartStd5flushEv>
	flush();
	//send_msg(command_size,command);
	
	read_msg(response_size,response,2,200);
 b6a:	08 ec       	ldi	r16, 0xC8	; 200
 b6c:	22 e0       	ldi	r18, 0x02	; 2
 b6e:	a6 01       	movw	r20, r12
 b70:	be 01       	movw	r22, r28
 b72:	c7 01       	movw	r24, r14
 b74:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN4Rosa8Rs485Std8read_msgERhPhhh>
 b78:	8f ec       	ldi	r24, 0xCF	; 207
 b7a:	97 e0       	ldi	r25, 0x07	; 7
 b7c:	01 97       	sbiw	r24, 0x01	; 1
 b7e:	f1 f7       	brne	.-4      	; 0xb7c <_ZN4Rosa8Velki4857forwardEPhhS1_Rh+0x32>
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <_ZN4Rosa8Velki4857forwardEPhhS1_Rh+0x38>
 b82:	00 00       	nop
	
	_delay_ms(1);
	
	if(response_size==0)
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	98 81       	ld	r25, Y
 b88:	91 11       	cpse	r25, r1
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <_ZN4Rosa8Velki4857forwardEPhhS1_Rh+0x44>
 b8c:	80 e0       	ldi	r24, 0x00	; 0
		return false;
		
	return true; // NOT ALL FINE - CHECK STAT pressure_msg[6] BYTE!!
	
}
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	ff 90       	pop	r15
 b98:	ef 90       	pop	r14
 b9a:	df 90       	pop	r13
 b9c:	cf 90       	pop	r12
 b9e:	08 95       	ret

00000ba0 <__udivmodsi4>:
 ba0:	a1 e2       	ldi	r26, 0x21	; 33
 ba2:	1a 2e       	mov	r1, r26
 ba4:	aa 1b       	sub	r26, r26
 ba6:	bb 1b       	sub	r27, r27
 ba8:	fd 01       	movw	r30, r26
 baa:	0d c0       	rjmp	.+26     	; 0xbc6 <__udivmodsi4_ep>

00000bac <__udivmodsi4_loop>:
 bac:	aa 1f       	adc	r26, r26
 bae:	bb 1f       	adc	r27, r27
 bb0:	ee 1f       	adc	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	a2 17       	cp	r26, r18
 bb6:	b3 07       	cpc	r27, r19
 bb8:	e4 07       	cpc	r30, r20
 bba:	f5 07       	cpc	r31, r21
 bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__udivmodsi4_ep>
 bbe:	a2 1b       	sub	r26, r18
 bc0:	b3 0b       	sbc	r27, r19
 bc2:	e4 0b       	sbc	r30, r20
 bc4:	f5 0b       	sbc	r31, r21

00000bc6 <__udivmodsi4_ep>:
 bc6:	66 1f       	adc	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	1a 94       	dec	r1
 bd0:	69 f7       	brne	.-38     	; 0xbac <__udivmodsi4_loop>
 bd2:	60 95       	com	r22
 bd4:	70 95       	com	r23
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	9b 01       	movw	r18, r22
 bdc:	ac 01       	movw	r20, r24
 bde:	bd 01       	movw	r22, r26
 be0:	cf 01       	movw	r24, r30
 be2:	08 95       	ret

00000be4 <__tablejump2__>:
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31

00000be8 <__tablejump__>:
 be8:	05 90       	lpm	r0, Z+
 bea:	f4 91       	lpm	r31, Z
 bec:	e0 2d       	mov	r30, r0
 bee:	09 94       	ijmp

00000bf0 <malloc>:
 bf0:	cf 93       	push	r28
 bf2:	df 93       	push	r29
 bf4:	82 30       	cpi	r24, 0x02	; 2
 bf6:	91 05       	cpc	r25, r1
 bf8:	10 f4       	brcc	.+4      	; 0xbfe <malloc+0xe>
 bfa:	82 e0       	ldi	r24, 0x02	; 2
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	e0 91 51 01 	lds	r30, 0x0151
 c02:	f0 91 52 01 	lds	r31, 0x0152
 c06:	20 e0       	ldi	r18, 0x00	; 0
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	a0 e0       	ldi	r26, 0x00	; 0
 c0c:	b0 e0       	ldi	r27, 0x00	; 0
 c0e:	30 97       	sbiw	r30, 0x00	; 0
 c10:	39 f1       	breq	.+78     	; 0xc60 <malloc+0x70>
 c12:	40 81       	ld	r20, Z
 c14:	51 81       	ldd	r21, Z+1	; 0x01
 c16:	48 17       	cp	r20, r24
 c18:	59 07       	cpc	r21, r25
 c1a:	b8 f0       	brcs	.+46     	; 0xc4a <malloc+0x5a>
 c1c:	48 17       	cp	r20, r24
 c1e:	59 07       	cpc	r21, r25
 c20:	71 f4       	brne	.+28     	; 0xc3e <malloc+0x4e>
 c22:	82 81       	ldd	r24, Z+2	; 0x02
 c24:	93 81       	ldd	r25, Z+3	; 0x03
 c26:	10 97       	sbiw	r26, 0x00	; 0
 c28:	29 f0       	breq	.+10     	; 0xc34 <malloc+0x44>
 c2a:	13 96       	adiw	r26, 0x03	; 3
 c2c:	9c 93       	st	X, r25
 c2e:	8e 93       	st	-X, r24
 c30:	12 97       	sbiw	r26, 0x02	; 2
 c32:	2c c0       	rjmp	.+88     	; 0xc8c <malloc+0x9c>
 c34:	90 93 52 01 	sts	0x0152, r25
 c38:	80 93 51 01 	sts	0x0151, r24
 c3c:	27 c0       	rjmp	.+78     	; 0xc8c <malloc+0x9c>
 c3e:	21 15       	cp	r18, r1
 c40:	31 05       	cpc	r19, r1
 c42:	31 f0       	breq	.+12     	; 0xc50 <malloc+0x60>
 c44:	42 17       	cp	r20, r18
 c46:	53 07       	cpc	r21, r19
 c48:	18 f0       	brcs	.+6      	; 0xc50 <malloc+0x60>
 c4a:	a9 01       	movw	r20, r18
 c4c:	db 01       	movw	r26, r22
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <malloc+0x62>
 c50:	ef 01       	movw	r28, r30
 c52:	9a 01       	movw	r18, r20
 c54:	bd 01       	movw	r22, r26
 c56:	df 01       	movw	r26, r30
 c58:	02 80       	ldd	r0, Z+2	; 0x02
 c5a:	f3 81       	ldd	r31, Z+3	; 0x03
 c5c:	e0 2d       	mov	r30, r0
 c5e:	d7 cf       	rjmp	.-82     	; 0xc0e <malloc+0x1e>
 c60:	21 15       	cp	r18, r1
 c62:	31 05       	cpc	r19, r1
 c64:	f9 f0       	breq	.+62     	; 0xca4 <malloc+0xb4>
 c66:	28 1b       	sub	r18, r24
 c68:	39 0b       	sbc	r19, r25
 c6a:	24 30       	cpi	r18, 0x04	; 4
 c6c:	31 05       	cpc	r19, r1
 c6e:	80 f4       	brcc	.+32     	; 0xc90 <malloc+0xa0>
 c70:	8a 81       	ldd	r24, Y+2	; 0x02
 c72:	9b 81       	ldd	r25, Y+3	; 0x03
 c74:	61 15       	cp	r22, r1
 c76:	71 05       	cpc	r23, r1
 c78:	21 f0       	breq	.+8      	; 0xc82 <malloc+0x92>
 c7a:	fb 01       	movw	r30, r22
 c7c:	93 83       	std	Z+3, r25	; 0x03
 c7e:	82 83       	std	Z+2, r24	; 0x02
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <malloc+0x9a>
 c82:	90 93 52 01 	sts	0x0152, r25
 c86:	80 93 51 01 	sts	0x0151, r24
 c8a:	fe 01       	movw	r30, r28
 c8c:	32 96       	adiw	r30, 0x02	; 2
 c8e:	44 c0       	rjmp	.+136    	; 0xd18 <malloc+0x128>
 c90:	fe 01       	movw	r30, r28
 c92:	e2 0f       	add	r30, r18
 c94:	f3 1f       	adc	r31, r19
 c96:	81 93       	st	Z+, r24
 c98:	91 93       	st	Z+, r25
 c9a:	22 50       	subi	r18, 0x02	; 2
 c9c:	31 09       	sbc	r19, r1
 c9e:	39 83       	std	Y+1, r19	; 0x01
 ca0:	28 83       	st	Y, r18
 ca2:	3a c0       	rjmp	.+116    	; 0xd18 <malloc+0x128>
 ca4:	20 91 4f 01 	lds	r18, 0x014F
 ca8:	30 91 50 01 	lds	r19, 0x0150
 cac:	23 2b       	or	r18, r19
 cae:	41 f4       	brne	.+16     	; 0xcc0 <malloc+0xd0>
 cb0:	20 91 02 01 	lds	r18, 0x0102
 cb4:	30 91 03 01 	lds	r19, 0x0103
 cb8:	30 93 50 01 	sts	0x0150, r19
 cbc:	20 93 4f 01 	sts	0x014F, r18
 cc0:	20 91 00 01 	lds	r18, 0x0100
 cc4:	30 91 01 01 	lds	r19, 0x0101
 cc8:	21 15       	cp	r18, r1
 cca:	31 05       	cpc	r19, r1
 ccc:	41 f4       	brne	.+16     	; 0xcde <malloc+0xee>
 cce:	2d b7       	in	r18, 0x3d	; 61
 cd0:	3e b7       	in	r19, 0x3e	; 62
 cd2:	40 91 04 01 	lds	r20, 0x0104
 cd6:	50 91 05 01 	lds	r21, 0x0105
 cda:	24 1b       	sub	r18, r20
 cdc:	35 0b       	sbc	r19, r21
 cde:	e0 91 4f 01 	lds	r30, 0x014F
 ce2:	f0 91 50 01 	lds	r31, 0x0150
 ce6:	e2 17       	cp	r30, r18
 ce8:	f3 07       	cpc	r31, r19
 cea:	a0 f4       	brcc	.+40     	; 0xd14 <malloc+0x124>
 cec:	2e 1b       	sub	r18, r30
 cee:	3f 0b       	sbc	r19, r31
 cf0:	28 17       	cp	r18, r24
 cf2:	39 07       	cpc	r19, r25
 cf4:	78 f0       	brcs	.+30     	; 0xd14 <malloc+0x124>
 cf6:	ac 01       	movw	r20, r24
 cf8:	4e 5f       	subi	r20, 0xFE	; 254
 cfa:	5f 4f       	sbci	r21, 0xFF	; 255
 cfc:	24 17       	cp	r18, r20
 cfe:	35 07       	cpc	r19, r21
 d00:	48 f0       	brcs	.+18     	; 0xd14 <malloc+0x124>
 d02:	4e 0f       	add	r20, r30
 d04:	5f 1f       	adc	r21, r31
 d06:	50 93 50 01 	sts	0x0150, r21
 d0a:	40 93 4f 01 	sts	0x014F, r20
 d0e:	81 93       	st	Z+, r24
 d10:	91 93       	st	Z+, r25
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <malloc+0x128>
 d14:	e0 e0       	ldi	r30, 0x00	; 0
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	cf 01       	movw	r24, r30
 d1a:	df 91       	pop	r29
 d1c:	cf 91       	pop	r28
 d1e:	08 95       	ret

00000d20 <free>:
 d20:	cf 93       	push	r28
 d22:	df 93       	push	r29
 d24:	00 97       	sbiw	r24, 0x00	; 0
 d26:	09 f4       	brne	.+2      	; 0xd2a <free+0xa>
 d28:	87 c0       	rjmp	.+270    	; 0xe38 <free+0x118>
 d2a:	fc 01       	movw	r30, r24
 d2c:	32 97       	sbiw	r30, 0x02	; 2
 d2e:	13 82       	std	Z+3, r1	; 0x03
 d30:	12 82       	std	Z+2, r1	; 0x02
 d32:	c0 91 51 01 	lds	r28, 0x0151
 d36:	d0 91 52 01 	lds	r29, 0x0152
 d3a:	20 97       	sbiw	r28, 0x00	; 0
 d3c:	81 f4       	brne	.+32     	; 0xd5e <free+0x3e>
 d3e:	20 81       	ld	r18, Z
 d40:	31 81       	ldd	r19, Z+1	; 0x01
 d42:	28 0f       	add	r18, r24
 d44:	39 1f       	adc	r19, r25
 d46:	80 91 4f 01 	lds	r24, 0x014F
 d4a:	90 91 50 01 	lds	r25, 0x0150
 d4e:	82 17       	cp	r24, r18
 d50:	93 07       	cpc	r25, r19
 d52:	79 f5       	brne	.+94     	; 0xdb2 <free+0x92>
 d54:	f0 93 50 01 	sts	0x0150, r31
 d58:	e0 93 4f 01 	sts	0x014F, r30
 d5c:	6d c0       	rjmp	.+218    	; 0xe38 <free+0x118>
 d5e:	de 01       	movw	r26, r28
 d60:	20 e0       	ldi	r18, 0x00	; 0
 d62:	30 e0       	ldi	r19, 0x00	; 0
 d64:	ae 17       	cp	r26, r30
 d66:	bf 07       	cpc	r27, r31
 d68:	50 f4       	brcc	.+20     	; 0xd7e <free+0x5e>
 d6a:	12 96       	adiw	r26, 0x02	; 2
 d6c:	4d 91       	ld	r20, X+
 d6e:	5c 91       	ld	r21, X
 d70:	13 97       	sbiw	r26, 0x03	; 3
 d72:	9d 01       	movw	r18, r26
 d74:	41 15       	cp	r20, r1
 d76:	51 05       	cpc	r21, r1
 d78:	09 f1       	breq	.+66     	; 0xdbc <free+0x9c>
 d7a:	da 01       	movw	r26, r20
 d7c:	f3 cf       	rjmp	.-26     	; 0xd64 <free+0x44>
 d7e:	b3 83       	std	Z+3, r27	; 0x03
 d80:	a2 83       	std	Z+2, r26	; 0x02
 d82:	40 81       	ld	r20, Z
 d84:	51 81       	ldd	r21, Z+1	; 0x01
 d86:	84 0f       	add	r24, r20
 d88:	95 1f       	adc	r25, r21
 d8a:	8a 17       	cp	r24, r26
 d8c:	9b 07       	cpc	r25, r27
 d8e:	71 f4       	brne	.+28     	; 0xdac <free+0x8c>
 d90:	8d 91       	ld	r24, X+
 d92:	9c 91       	ld	r25, X
 d94:	11 97       	sbiw	r26, 0x01	; 1
 d96:	84 0f       	add	r24, r20
 d98:	95 1f       	adc	r25, r21
 d9a:	02 96       	adiw	r24, 0x02	; 2
 d9c:	91 83       	std	Z+1, r25	; 0x01
 d9e:	80 83       	st	Z, r24
 da0:	12 96       	adiw	r26, 0x02	; 2
 da2:	8d 91       	ld	r24, X+
 da4:	9c 91       	ld	r25, X
 da6:	13 97       	sbiw	r26, 0x03	; 3
 da8:	93 83       	std	Z+3, r25	; 0x03
 daa:	82 83       	std	Z+2, r24	; 0x02
 dac:	21 15       	cp	r18, r1
 dae:	31 05       	cpc	r19, r1
 db0:	29 f4       	brne	.+10     	; 0xdbc <free+0x9c>
 db2:	f0 93 52 01 	sts	0x0152, r31
 db6:	e0 93 51 01 	sts	0x0151, r30
 dba:	3e c0       	rjmp	.+124    	; 0xe38 <free+0x118>
 dbc:	d9 01       	movw	r26, r18
 dbe:	13 96       	adiw	r26, 0x03	; 3
 dc0:	fc 93       	st	X, r31
 dc2:	ee 93       	st	-X, r30
 dc4:	12 97       	sbiw	r26, 0x02	; 2
 dc6:	4d 91       	ld	r20, X+
 dc8:	5d 91       	ld	r21, X+
 dca:	a4 0f       	add	r26, r20
 dcc:	b5 1f       	adc	r27, r21
 dce:	ea 17       	cp	r30, r26
 dd0:	fb 07       	cpc	r31, r27
 dd2:	79 f4       	brne	.+30     	; 0xdf2 <free+0xd2>
 dd4:	80 81       	ld	r24, Z
 dd6:	91 81       	ldd	r25, Z+1	; 0x01
 dd8:	84 0f       	add	r24, r20
 dda:	95 1f       	adc	r25, r21
 ddc:	02 96       	adiw	r24, 0x02	; 2
 dde:	d9 01       	movw	r26, r18
 de0:	11 96       	adiw	r26, 0x01	; 1
 de2:	9c 93       	st	X, r25
 de4:	8e 93       	st	-X, r24
 de6:	82 81       	ldd	r24, Z+2	; 0x02
 de8:	93 81       	ldd	r25, Z+3	; 0x03
 dea:	13 96       	adiw	r26, 0x03	; 3
 dec:	9c 93       	st	X, r25
 dee:	8e 93       	st	-X, r24
 df0:	12 97       	sbiw	r26, 0x02	; 2
 df2:	e0 e0       	ldi	r30, 0x00	; 0
 df4:	f0 e0       	ldi	r31, 0x00	; 0
 df6:	8a 81       	ldd	r24, Y+2	; 0x02
 df8:	9b 81       	ldd	r25, Y+3	; 0x03
 dfa:	00 97       	sbiw	r24, 0x00	; 0
 dfc:	19 f0       	breq	.+6      	; 0xe04 <free+0xe4>
 dfe:	fe 01       	movw	r30, r28
 e00:	ec 01       	movw	r28, r24
 e02:	f9 cf       	rjmp	.-14     	; 0xdf6 <free+0xd6>
 e04:	ce 01       	movw	r24, r28
 e06:	02 96       	adiw	r24, 0x02	; 2
 e08:	28 81       	ld	r18, Y
 e0a:	39 81       	ldd	r19, Y+1	; 0x01
 e0c:	82 0f       	add	r24, r18
 e0e:	93 1f       	adc	r25, r19
 e10:	20 91 4f 01 	lds	r18, 0x014F
 e14:	30 91 50 01 	lds	r19, 0x0150
 e18:	28 17       	cp	r18, r24
 e1a:	39 07       	cpc	r19, r25
 e1c:	69 f4       	brne	.+26     	; 0xe38 <free+0x118>
 e1e:	30 97       	sbiw	r30, 0x00	; 0
 e20:	29 f4       	brne	.+10     	; 0xe2c <free+0x10c>
 e22:	10 92 52 01 	sts	0x0152, r1
 e26:	10 92 51 01 	sts	0x0151, r1
 e2a:	02 c0       	rjmp	.+4      	; 0xe30 <free+0x110>
 e2c:	13 82       	std	Z+3, r1	; 0x03
 e2e:	12 82       	std	Z+2, r1	; 0x02
 e30:	d0 93 50 01 	sts	0x0150, r29
 e34:	c0 93 4f 01 	sts	0x014F, r28
 e38:	df 91       	pop	r29
 e3a:	cf 91       	pop	r28
 e3c:	08 95       	ret

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
