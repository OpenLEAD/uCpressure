
RosaSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  0080011e  0080011e  0000141c  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007da  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000250  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004870  00000000  00000000  00003fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013c3  00000000  00000000  00008851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d0  00000000  00000000  0000adec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e19  00000000  00000000  0000b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002336  00000000  00000000  0000c3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000230  00000000  00000000  0000e70b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

00000094 <__ctors_start>:
      94:	ce 02       	muls	r28, r30
      96:	10 04       	cpc	r1, r0

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e6       	ldi	r30, 0x6A	; 106
      ac:	f3 e1       	ldi	r31, 0x13	; 19
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 31       	cpi	r26, 0x1E	; 30
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	ae e1       	ldi	r26, 0x1E	; 30
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 36       	cpi	r26, 0x6B	; 107
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c8 e9       	ldi	r28, 0x98	; 152
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	22 97       	sbiw	r28, 0x02	; 2
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__tablejump__>
      da:	c4 39       	cpi	r28, 0x94	; 148
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 96 04 	call	0x92c	; 0x92c <main>
      e4:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_ZN6OutBitaSEb>:
 */ 

#include "OutBit.h"

void OutBit::operator=(bool value){
	if(value)
      ec:	66 23       	and	r22, r22
      ee:	99 f0       	breq	.+38     	; 0x116 <_ZN6OutBitaSEb+0x2a>
	*pt |= 1<<wbit;
      f0:	dc 01       	movw	r26, r24
      f2:	ed 91       	ld	r30, X+
      f4:	fc 91       	ld	r31, X
      f6:	11 97       	sbiw	r26, 0x01	; 1
      f8:	40 81       	ld	r20, Z
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	b9 01       	movw	r22, r18
     100:	12 96       	adiw	r26, 0x02	; 2
     102:	0c 90       	ld	r0, X
     104:	02 c0       	rjmp	.+4      	; 0x10a <_ZN6OutBitaSEb+0x1e>
     106:	66 0f       	add	r22, r22
     108:	77 1f       	adc	r23, r23
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <_ZN6OutBitaSEb+0x1a>
     10e:	cb 01       	movw	r24, r22
     110:	84 2b       	or	r24, r20
     112:	80 83       	st	Z, r24
     114:	08 95       	ret
	else
	*pt &= ~(1<<wbit);
     116:	dc 01       	movw	r26, r24
     118:	ed 91       	ld	r30, X+
     11a:	fc 91       	ld	r31, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	40 81       	ld	r20, Z
     120:	21 e0       	ldi	r18, 0x01	; 1
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	b9 01       	movw	r22, r18
     126:	12 96       	adiw	r26, 0x02	; 2
     128:	0c 90       	ld	r0, X
     12a:	02 c0       	rjmp	.+4      	; 0x130 <_ZN6OutBitaSEb+0x44>
     12c:	66 0f       	add	r22, r22
     12e:	77 1f       	adc	r23, r23
     130:	0a 94       	dec	r0
     132:	e2 f7       	brpl	.-8      	; 0x12c <_ZN6OutBitaSEb+0x40>
     134:	cb 01       	movw	r24, r22
     136:	80 95       	com	r24
     138:	84 23       	and	r24, r20
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <_ZN4Rosa8Rs485Std8send_msgEhPh>:
	Rs485Std::~Rs485Std()
	{
	} //~Rs485Std

	void Rs485Std::send_msg( uint8_t data_length, uint8_t *msg )
	{
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	8c 01       	movw	r16, r24
		tx_enable->set();
     14c:	fc 01       	movw	r30, r24
     14e:	a2 81       	ldd	r26, Z+2	; 0x02
     150:	b3 81       	ldd	r27, Z+3	; 0x03
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
     152:	ed 91       	ld	r30, X+
     154:	fc 91       	ld	r31, X
     156:	11 97       	sbiw	r26, 0x01	; 1
     158:	70 81       	ld	r23, Z
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	c9 01       	movw	r24, r18
     160:	12 96       	adiw	r26, 0x02	; 2
     162:	0c 90       	ld	r0, X
     164:	02 c0       	rjmp	.+4      	; 0x16a <_ZN4Rosa8Rs485Std8send_msgEhPh+0x2c>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	0a 94       	dec	r0
     16c:	e2 f7       	brpl	.-8      	; 0x166 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x28>
     16e:	87 2b       	or	r24, r23
     170:	80 83       	st	Z, r24
		for (uint8_t i = 0 ; i < data_length ; i++)
     172:	66 23       	and	r22, r22
     174:	91 f0       	breq	.+36     	; 0x19a <_ZN4Rosa8Rs485Std8send_msgEhPh+0x5c>
     176:	c4 2f       	mov	r28, r20
     178:	d5 2f       	mov	r29, r21
	// default destructor
	Rs485Std::~Rs485Std()
	{
	} //~Rs485Std

	void Rs485Std::send_msg( uint8_t data_length, uint8_t *msg )
     17a:	61 50       	subi	r22, 0x01	; 1
     17c:	7e 01       	movw	r14, r28
     17e:	e6 0e       	add	r14, r22
     180:	f1 1c       	adc	r15, r1
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	ef 1a       	sub	r14, r31
     186:	ff 0a       	sbc	r15, r31
	{
		tx_enable->set();
		for (uint8_t i = 0 ; i < data_length ; i++)
		uart->send(msg[i]);
     188:	69 91       	ld	r22, Y+
     18a:	f8 01       	movw	r30, r16
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	0e 94 9a 02 	call	0x534	; 0x534 <_ZNK4Rosa7UartStd4sendEh>
	} //~Rs485Std

	void Rs485Std::send_msg( uint8_t data_length, uint8_t *msg )
	{
		tx_enable->set();
		for (uint8_t i = 0 ; i < data_length ; i++)
     194:	ce 15       	cp	r28, r14
     196:	df 05       	cpc	r29, r15
     198:	b9 f7       	brne	.-18     	; 0x188 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x4a>
		uart->send(msg[i]);
		
		while(uart->transmit_ongoing());
     19a:	f8 01       	movw	r30, r16
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZNK4Rosa7UartStd16transmit_ongoingEv>
     1a4:	81 11       	cpse	r24, r1
     1a6:	f9 cf       	rjmp	.-14     	; 0x19a <_ZN4Rosa8Rs485Std8send_msgEhPh+0x5c>
		tx_enable->unset();
     1a8:	f8 01       	movw	r30, r16
     1aa:	a2 81       	ldd	r26, Z+2	; 0x02
     1ac:	b3 81       	ldd	r27, Z+3	; 0x03
	
	inline OutBit unset(){*pt = *pt & ~(1<<wbit);	return *this;}
     1ae:	ed 91       	ld	r30, X+
     1b0:	fc 91       	ld	r31, X
     1b2:	11 97       	sbiw	r26, 0x01	; 1
     1b4:	20 81       	ld	r18, Z
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	12 96       	adiw	r26, 0x02	; 2
     1bc:	0c 90       	ld	r0, X
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x86>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	0a 94       	dec	r0
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <_ZN4Rosa8Rs485Std8send_msgEhPh+0x82>
     1c8:	80 95       	com	r24
     1ca:	82 23       	and	r24, r18
     1cc:	80 83       	st	Z, r24
		
	}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	08 95       	ret

000001dc <_ZN4Rosa8Rs485Std8read_msgERhPhff>:

	bool Rs485Std::read_msg( uint8_t& data_length, uint8_t *msg, float byte_timeout, float response_timeout)
	{
     1dc:	4f 92       	push	r4
     1de:	5f 92       	push	r5
     1e0:	6f 92       	push	r6
     1e2:	7f 92       	push	r7
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	ec 01       	movw	r28, r24
     1fe:	5b 01       	movw	r10, r22
     200:	4a 01       	movw	r8, r20
     202:	28 01       	movw	r4, r16
     204:	39 01       	movw	r6, r18
     206:	b7 01       	movw	r22, r14
     208:	a6 01       	movw	r20, r12
		rx_enable->unset();
     20a:	ac 81       	ldd	r26, Y+4	; 0x04
     20c:	bd 81       	ldd	r27, Y+5	; 0x05
     20e:	ed 91       	ld	r30, X+
     210:	fc 91       	ld	r31, X
     212:	11 97       	sbiw	r26, 0x01	; 1
     214:	20 81       	ld	r18, Z
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	12 96       	adiw	r26, 0x02	; 2
     21c:	0c 90       	ld	r0, X
     21e:	02 c0       	rjmp	.+4      	; 0x224 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x48>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x44>
     228:	80 95       	com	r24
     22a:	82 23       	and	r24, r18
     22c:	80 83       	st	Z, r24
		
		if(!uart->read(response_timeout,msg)){
     22e:	94 01       	movw	r18, r8
     230:	88 81       	ld	r24, Y
     232:	99 81       	ldd	r25, Y+1	; 0x01
     234:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZNK4Rosa7UartStd4readEfPh>
     238:	88 23       	and	r24, r24
     23a:	29 f0       	breq	.+10     	; 0x246 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x6a>
			return false;
		}
		
		uint8_t received_length = 1;
		
		for (uint8_t i = 1 ; i < data_length ; i++, received_length++)
     23c:	f5 01       	movw	r30, r10
     23e:	80 81       	ld	r24, Z
     240:	82 30       	cpi	r24, 0x02	; 2
     242:	28 f4       	brcc	.+10     	; 0x24e <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x72>
     244:	18 c0       	rjmp	.+48     	; 0x276 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x9a>
	bool Rs485Std::read_msg( uint8_t& data_length, uint8_t *msg, float byte_timeout, float response_timeout)
	{
		rx_enable->unset();
		
		if(!uart->read(response_timeout,msg)){
			data_length=0;
     246:	f5 01       	movw	r30, r10
     248:	10 82       	st	Z, r1
			return false;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	27 c0       	rjmp	.+78     	; 0x29c <_ZN4Rosa8Rs485Std8read_msgERhPhff+0xc0>
		}
		
		uint8_t received_length = 1;
		
		for (uint8_t i = 1 ; i < data_length ; i++, received_length++)
     24e:	11 e0       	ldi	r17, 0x01	; 1
		if(!uart->read(byte_timeout,msg+i)){
     250:	94 01       	movw	r18, r8
     252:	21 0f       	add	r18, r17
     254:	31 1d       	adc	r19, r1
     256:	b3 01       	movw	r22, r6
     258:	a2 01       	movw	r20, r4
     25a:	88 81       	ld	r24, Y
     25c:	99 81       	ldd	r25, Y+1	; 0x01
     25e:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZNK4Rosa7UartStd4readEfPh>
     262:	81 11       	cpse	r24, r1
     264:	03 c0       	rjmp	.+6      	; 0x26c <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x90>
			data_length = received_length;
     266:	f5 01       	movw	r30, r10
     268:	10 83       	st	Z, r17
			return false;
     26a:	18 c0       	rjmp	.+48     	; 0x29c <_ZN4Rosa8Rs485Std8read_msgERhPhff+0xc0>
			return false;
		}
		
		uint8_t received_length = 1;
		
		for (uint8_t i = 1 ; i < data_length ; i++, received_length++)
     26c:	1f 5f       	subi	r17, 0xFF	; 255
     26e:	f5 01       	movw	r30, r10
     270:	80 81       	ld	r24, Z
     272:	18 17       	cp	r17, r24
     274:	68 f3       	brcs	.-38     	; 0x250 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0x74>
		if(!uart->read(byte_timeout,msg+i)){
			data_length = received_length;
			return false;
		}
		
		rx_enable->set();
     276:	ac 81       	ldd	r26, Y+4	; 0x04
     278:	bd 81       	ldd	r27, Y+5	; 0x05
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
     27a:	ed 91       	ld	r30, X+
     27c:	fc 91       	ld	r31, X
     27e:	11 97       	sbiw	r26, 0x01	; 1
     280:	40 81       	ld	r20, Z
     282:	21 e0       	ldi	r18, 0x01	; 1
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	c9 01       	movw	r24, r18
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	0c 90       	ld	r0, X
     28c:	02 c0       	rjmp	.+4      	; 0x292 <_ZN4Rosa8Rs485Std8read_msgERhPhff+0xb6>
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	0a 94       	dec	r0
     294:	e2 f7       	brpl	.-8      	; 0x28e <_ZN4Rosa8Rs485Std8read_msgERhPhff+0xb2>
     296:	84 2b       	or	r24, r20
     298:	80 83       	st	Z, r24
		
		return true;
     29a:	81 e0       	ldi	r24, 0x01	; 1
	}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	bf 90       	pop	r11
     2ae:	af 90       	pop	r10
     2b0:	9f 90       	pop	r9
     2b2:	8f 90       	pop	r8
     2b4:	7f 90       	pop	r7
     2b6:	6f 90       	pop	r6
     2b8:	5f 90       	pop	r5
     2ba:	4f 90       	pop	r4
     2bc:	08 95       	ret

000002be <_ZN4Rosa8UartRosa8send_msgEhPh>:
	UartRosa::~UartRosa()
	{
	} //~UartRosa

	void UartRosa::send_msg( uint8_t data_length, uint8_t *msg )
	{
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	8c 01       	movw	r16, r24
     2ce:	f6 2e       	mov	r15, r22
     2d0:	d4 2e       	mov	r13, r20
     2d2:	e5 2e       	mov	r14, r21
		uart->send(SOT);
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	0e 94 9a 02 	call	0x534	; 0x534 <_ZNK4Rosa7UartStd4sendEh>
		uart->send(data_length);
     2e0:	6f 2d       	mov	r22, r15
     2e2:	f8 01       	movw	r30, r16
     2e4:	80 81       	ld	r24, Z
     2e6:	91 81       	ldd	r25, Z+1	; 0x01
     2e8:	0e 94 9a 02 	call	0x534	; 0x534 <_ZNK4Rosa7UartStd4sendEh>
		for (uint8_t i=0; i < data_length; i++)
     2ec:	ff 20       	and	r15, r15
     2ee:	99 f0       	breq	.+38     	; 0x316 <_ZN4Rosa8UartRosa8send_msgEhPh+0x58>
     2f0:	cd 2d       	mov	r28, r13
     2f2:	de 2d       	mov	r29, r14
	// default destructor
	UartRosa::~UartRosa()
	{
	} //~UartRosa

	void UartRosa::send_msg( uint8_t data_length, uint8_t *msg )
     2f4:	fa 94       	dec	r15
     2f6:	ce 01       	movw	r24, r28
     2f8:	8f 0d       	add	r24, r15
     2fa:	91 1d       	adc	r25, r1
     2fc:	7c 01       	movw	r14, r24
     2fe:	9f ef       	ldi	r25, 0xFF	; 255
     300:	e9 1a       	sub	r14, r25
     302:	f9 0a       	sbc	r15, r25
	{
		uart->send(SOT);
		uart->send(data_length);
		for (uint8_t i=0; i < data_length; i++)
		uart->send(msg[i]);
     304:	69 91       	ld	r22, Y+
     306:	f8 01       	movw	r30, r16
     308:	80 81       	ld	r24, Z
     30a:	91 81       	ldd	r25, Z+1	; 0x01
     30c:	0e 94 9a 02 	call	0x534	; 0x534 <_ZNK4Rosa7UartStd4sendEh>

	void UartRosa::send_msg( uint8_t data_length, uint8_t *msg )
	{
		uart->send(SOT);
		uart->send(data_length);
		for (uint8_t i=0; i < data_length; i++)
     310:	ce 15       	cp	r28, r14
     312:	df 05       	cpc	r29, r15
     314:	b9 f7       	brne	.-18     	; 0x304 <_ZN4Rosa8UartRosa8send_msgEhPh+0x46>
		uart->send(msg[i]);
		uart->send(EOT);
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	f8 01       	movw	r30, r16
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	0e 94 9a 02 	call	0x534	; 0x534 <_ZNK4Rosa7UartStd4sendEh>
	}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	08 95       	ret

00000332 <_ZN4Rosa8UartRosa8read_msgERhPh>:

	uint8_t UartRosa::read_msg( uint8_t& data_length, uint8_t *msg)
	{
     332:	bf 92       	push	r11
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	ec 01       	movw	r28, r24
     346:	7b 01       	movw	r14, r22
     348:	6a 01       	movw	r12, r20
		
		// Aguarda ate a chegada do byte indicando o inicio de transmissao do PC ao AVR Master
		
		while(uart->read()!=SOT);
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	88 81       	ld	r24, Y
     352:	99 81       	ldd	r25, Y+1	; 0x01
     354:	0e 94 24 02 	call	0x448	; 0x448 <_ZNK4Rosa7UartStd4readEbPb>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	b9 f7       	brne	.-18     	; 0x34a <_ZN4Rosa8UartRosa8read_msgERhPh+0x18>
		// Aguarda o tamanho da mensagem
		data_length = uart->read();
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	88 81       	ld	r24, Y
     364:	99 81       	ldd	r25, Y+1	; 0x01
     366:	0e 94 24 02 	call	0x448	; 0x448 <_ZNK4Rosa7UartStd4readEbPb>
     36a:	f7 01       	movw	r30, r14
     36c:	80 83       	st	Z, r24
		for (uint8_t i = 0 ; i < data_length ; i++)
     36e:	88 23       	and	r24, r24
     370:	91 f0       	breq	.+36     	; 0x396 <_ZN4Rosa8UartRosa8read_msgERhPh+0x64>
     372:	b1 2c       	mov	r11, r1
		msg[i] = uart->read();
     374:	86 01       	movw	r16, r12
     376:	0b 0d       	add	r16, r11
     378:	11 1d       	adc	r17, r1
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	88 81       	ld	r24, Y
     382:	99 81       	ldd	r25, Y+1	; 0x01
     384:	0e 94 24 02 	call	0x448	; 0x448 <_ZNK4Rosa7UartStd4readEbPb>
     388:	f8 01       	movw	r30, r16
     38a:	80 83       	st	Z, r24
		// Aguarda ate a chegada do byte indicando o inicio de transmissao do PC ao AVR Master
		
		while(uart->read()!=SOT);
		// Aguarda o tamanho da mensagem
		data_length = uart->read();
		for (uint8_t i = 0 ; i < data_length ; i++)
     38c:	b3 94       	inc	r11
     38e:	f7 01       	movw	r30, r14
     390:	80 81       	ld	r24, Z
     392:	b8 16       	cp	r11, r24
     394:	78 f3       	brcs	.-34     	; 0x374 <_ZN4Rosa8UartRosa8read_msgERhPh+0x42>
		msg[i] = uart->read();
		
		if (uart->read()!=EOT) return (ERRO_GETMSG_GETTING_EOT);
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	88 81       	ld	r24, Y
     39e:	99 81       	ldd	r25, Y+1	; 0x01
     3a0:	0e 94 24 02 	call	0x448	; 0x448 <_ZNK4Rosa7UartStd4readEbPb>
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	11 f0       	breq	.+4      	; 0x3ac <_ZN4Rosa8UartRosa8read_msgERhPh+0x7a>
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <_ZN4Rosa8UartRosa8read_msgERhPh+0x7c>
		
		return (OK);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
		
	}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	bf 90       	pop	r11
     3c0:	08 95       	ret

000003c2 <_ZNK4Rosa7UartStd6enableEv>:
	&UCSR0C,
	&UBRR0,
	&UDR0
	);
	void UartStd::enable(void) const
	{
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ec 01       	movw	r28, r24
		/* Set baud rate */
		*(UBRR) = (((F_CPU / (config->baud * 16UL))) - 1);
     3cc:	0e 81       	ldd	r16, Y+6	; 0x06
     3ce:	1f 81       	ldd	r17, Y+7	; 0x07
     3d0:	ea 85       	ldd	r30, Y+10	; 0x0a
     3d2:	fb 85       	ldd	r31, Y+11	; 0x0b
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	c9 01       	movw	r24, r18
     3da:	a0 e0       	ldi	r26, 0x00	; 0
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	aa 1f       	adc	r26, r26
     3e4:	bb 1f       	adc	r27, r27
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	aa 1f       	adc	r26, r26
     3ec:	bb 1f       	adc	r27, r27
     3ee:	9c 01       	movw	r18, r24
     3f0:	ad 01       	movw	r20, r26
     3f2:	22 0f       	add	r18, r18
     3f4:	33 1f       	adc	r19, r19
     3f6:	44 1f       	adc	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	44 1f       	adc	r20, r20
     400:	55 1f       	adc	r21, r21
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	72 e1       	ldi	r23, 0x12	; 18
     406:	8a e7       	ldi	r24, 0x7A	; 122
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 38 08 	call	0x1070	; 0x1070 <__udivmodsi4>
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	31 09       	sbc	r19, r1
     412:	f8 01       	movw	r30, r16
     414:	31 83       	std	Z+1, r19	; 0x01
     416:	20 83       	st	Z, r18
		/* Set frame format: 8data, no parity & 2 stop bits */
		*(UCSRC) = (1<<UCSZ1) | (1<<UCSZ0) | (config->stopbit << USBS);
     418:	ec 81       	ldd	r30, Y+4	; 0x04
     41a:	fd 81       	ldd	r31, Y+5	; 0x05
     41c:	aa 85       	ldd	r26, Y+10	; 0x0a
     41e:	bb 85       	ldd	r27, Y+11	; 0x0b
     420:	13 96       	adiw	r26, 0x03	; 3
     422:	8c 91       	ld	r24, X
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	86 60       	ori	r24, 0x06	; 6
     434:	80 83       	st	Z, r24
		/* Enable receiver and transmitter */
		*(UCSRB) = (1<<RXEN) | (1<<TXEN);// | (1<<RXCIE);
     436:	ea 81       	ldd	r30, Y+2	; 0x02
     438:	fb 81       	ldd	r31, Y+3	; 0x03
     43a:	88 e1       	ldi	r24, 0x18	; 24
     43c:	80 83       	st	Z, r24
	}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <_ZNK4Rosa7UartStd4readEbPb>:
	uint8_t UartStd::read(bool wait, bool* status) const
	{
		uint8_t readed,data;
		
		if (wait){
     448:	66 23       	and	r22, r22
     44a:	39 f0       	breq	.+14     	; 0x45a <_ZNK4Rosa7UartStd4readEbPb+0x12>
			while (((readed=*(UCSRA)) & RX_COMPLETE )==0) continue;
     44c:	dc 01       	movw	r26, r24
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	20 81       	ld	r18, Z
     454:	22 23       	and	r18, r18
     456:	ec f7       	brge	.-6      	; 0x452 <_ZNK4Rosa7UartStd4readEbPb+0xa>
     458:	0d c0       	rjmp	.+26     	; 0x474 <_ZNK4Rosa7UartStd4readEbPb+0x2c>
		}
		else{
			if (((readed=*(UCSRA)) & RX_COMPLETE)==0){
     45a:	dc 01       	movw	r26, r24
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	20 81       	ld	r18, Z
     462:	22 23       	and	r18, r18
     464:	3c f0       	brlt	.+14     	; 0x474 <_ZNK4Rosa7UartStd4readEbPb+0x2c>
				if (status != NULL)
     466:	41 15       	cp	r20, r1
     468:	51 05       	cpc	r21, r1
     46a:	b1 f0       	breq	.+44     	; 0x498 <_ZNK4Rosa7UartStd4readEbPb+0x50>
				*status = false;
     46c:	fa 01       	movw	r30, r20
     46e:	10 82       	st	Z, r1
				return 0;
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	08 95       	ret
			}
		}
		
		data = *(UDR);
     474:	dc 01       	movw	r26, r24
     476:	18 96       	adiw	r26, 0x08	; 8
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	19 97       	sbiw	r26, 0x09	; 9
     47e:	80 81       	ld	r24, Z
		
		if (status != NULL)
     480:	41 15       	cp	r20, r1
     482:	51 05       	cpc	r21, r1
     484:	51 f0       	breq	.+20     	; 0x49a <_ZNK4Rosa7UartStd4readEbPb+0x52>
		{
			if ((readed & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
     486:	2c 71       	andi	r18, 0x1C	; 28
     488:	21 f4       	brne	.+8      	; 0x492 <_ZNK4Rosa7UartStd4readEbPb+0x4a>
			*status = true;
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	fa 01       	movw	r30, r20
     48e:	90 83       	st	Z, r25
     490:	08 95       	ret
			else
			*status = false;
     492:	da 01       	movw	r26, r20
     494:	1c 92       	st	X, r1
     496:	08 95       	ret
		}
		else{
			if (((readed=*(UCSRA)) & RX_COMPLETE)==0){
				if (status != NULL)
				*status = false;
				return 0;
     498:	80 e0       	ldi	r24, 0x00	; 0
			*status = false;
		}
		
		return data;
		
	}
     49a:	08 95       	ret

0000049c <_ZNK4Rosa7UartStd4readEfPh>:

	bool UartStd::read( float timeout_ms, uint8_t* data) const
	{
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	ba 01       	movw	r22, r20
     4aa:	89 01       	movw	r16, r18
		uint8_t readed;
		TCCR1B = 0; //set NO CLOCK TCCR1A=0, TCCR1B = 0b101;
     4ac:	10 92 81 00 	sts	0x0081, r1
		TCNT1 =(uint16_t) 0; //Clear counter
     4b0:	10 92 85 00 	sts	0x0085, r1
     4b4:	10 92 84 00 	sts	0x0084, r1
		OCR1A = (uint16_t) (timeout_ms/1000.0 * F_CPU/1024.0); //set number of cycles to compare (with PRESCALER 1024 set on 0b101<<CS0)
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4a e7       	ldi	r20, 0x7A	; 122
     4be:	54 e4       	ldi	r21, 0x44	; 68
     4c0:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divsf3>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	34 e2       	ldi	r19, 0x24	; 36
     4c8:	44 ef       	ldi	r20, 0xF4	; 244
     4ca:	5a e4       	ldi	r21, 0x4A	; 74
     4cc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__mulsf3>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e8       	ldi	r20, 0x80	; 128
     4d6:	5a e3       	ldi	r21, 0x3A	; 58
     4d8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__mulsf3>
     4dc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fixunssfsi>
     4e0:	70 93 89 00 	sts	0x0089, r23
     4e4:	60 93 88 00 	sts	0x0088, r22
		
		if(TIFR1 & (1<<OCF1A))
     4e8:	b1 9b       	sbis	0x16, 1	; 22
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <_ZNK4Rosa7UartStd4readEfPh+0x54>
		TIFR1 = 1<<OCF1A; //Clear compare flag
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	86 bb       	out	0x16, r24	; 22
		
		TCCR1B = 0b101; //set PRESCALER 1024
     4f0:	85 e0       	ldi	r24, 0x05	; 5
     4f2:	80 93 81 00 	sts	0x0081, r24
		
		while (((readed=*(UCSRA)) & RX_COMPLETE )==0){
     4f6:	e8 81       	ld	r30, Y
     4f8:	f9 81       	ldd	r31, Y+1	; 0x01
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <_ZNK4Rosa7UartStd4readEfPh+0x70>
		if(TIFR1 & (1<<OCF1A)){ //Check for compare flag each cycle
     4fc:	b1 9b       	sbis	0x16, 1	; 22
     4fe:	06 c0       	rjmp	.+12     	; 0x50c <_ZNK4Rosa7UartStd4readEfPh+0x70>
			TCCR1B = 0; //set NO CLOCK
     500:	10 92 81 00 	sts	0x0081, r1
			TIFR1 = 1<<OCF1A;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	86 bb       	out	0x16, r24	; 22
			return false;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0f c0       	rjmp	.+30     	; 0x52a <_ZNK4Rosa7UartStd4readEfPh+0x8e>
		if(TIFR1 & (1<<OCF1A))
		TIFR1 = 1<<OCF1A; //Clear compare flag
		
		TCCR1B = 0b101; //set PRESCALER 1024
		
		while (((readed=*(UCSRA)) & RX_COMPLETE )==0){
     50c:	80 81       	ld	r24, Z
     50e:	88 23       	and	r24, r24
     510:	ac f7       	brge	.-22     	; 0x4fc <_ZNK4Rosa7UartStd4readEfPh+0x60>
			TCCR1B = 0; //set NO CLOCK
			TIFR1 = 1<<OCF1A;
			return false;
		}
		}
		TCCR1B = 0; //set NO CLOCK}
     512:	10 92 81 00 	sts	0x0081, r1

		*data = *UDR;
     516:	e8 85       	ldd	r30, Y+8	; 0x08
     518:	f9 85       	ldd	r31, Y+9	; 0x09
     51a:	90 81       	ld	r25, Z
     51c:	f8 01       	movw	r30, r16
     51e:	90 83       	st	Z, r25
		
		if (readed & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))
     520:	98 2f       	mov	r25, r24
     522:	9c 71       	andi	r25, 0x1C	; 28
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	09 f0       	breq	.+2      	; 0x52a <_ZNK4Rosa7UartStd4readEfPh+0x8e>
     528:	80 e0       	ldi	r24, 0x00	; 0
			return false;
			
		return true;
	}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <_ZNK4Rosa7UartStd4sendEh>:

	void UartStd::send(uint8_t data) const{
     534:	dc 01       	movw	r26, r24
		*(UCSRA) |= (1<<TXC);
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	80 81       	ld	r24, Z
     53e:	80 64       	ori	r24, 0x40	; 64
     540:	80 83       	st	Z, r24
		while ((*(UCSRA) & DATA_REGISTER_EMPTY)==0);
     542:	ed 91       	ld	r30, X+
     544:	fc 91       	ld	r31, X
     546:	11 97       	sbiw	r26, 0x01	; 1
     548:	80 81       	ld	r24, Z
     54a:	85 ff       	sbrs	r24, 5
     54c:	fd cf       	rjmp	.-6      	; 0x548 <_ZNK4Rosa7UartStd4sendEh+0x14>
		*(UDR) = data;
     54e:	18 96       	adiw	r26, 0x08	; 8
     550:	ed 91       	ld	r30, X+
     552:	fc 91       	ld	r31, X
     554:	19 97       	sbiw	r26, 0x09	; 9
     556:	60 83       	st	Z, r22
     558:	08 95       	ret

0000055a <_ZNK4Rosa7UartStd16transmit_ongoingEv>:
	}

	bool UartStd::transmit_ongoing( void ) const
	{
		if ((*(UCSRA) & (1<<TXC)) == 0)
     55a:	dc 01       	movw	r26, r24
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	80 81       	ld	r24, Z
     562:	86 ff       	sbrs	r24, 6
     564:	05 c0       	rjmp	.+10     	; 0x570 <_ZNK4Rosa7UartStd16transmit_ongoingEv+0x16>
		return true;
		else {
			*(UCSRA) |= (1<<TXC);
     566:	80 81       	ld	r24, Z
     568:	80 64       	ori	r24, 0x40	; 64
     56a:	80 83       	st	Z, r24
			return false;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
	}

	bool UartStd::transmit_ongoing( void ) const
	{
		if ((*(UCSRA) & (1<<TXC)) == 0)
		return true;
     570:	81 e0       	ldi	r24, 0x01	; 1
		else {
			*(UCSRA) |= (1<<TXC);
			return false;
		}

	}
     572:	08 95       	ret

00000574 <_ZNK4Rosa7UartStd5flushEv>:

void UartStd::flush( void ) const
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	uint8_t dummy;
	while (*UCSRA & RX_COMPLETE)
     578:	dc 01       	movw	r26, r24
     57a:	ed 91       	ld	r30, X+
     57c:	fc 91       	ld	r31, X
     57e:	11 97       	sbiw	r26, 0x01	; 1
     580:	20 81       	ld	r18, Z
     582:	22 23       	and	r18, r18
     584:	44 f4       	brge	.+16     	; 0x596 <_ZNK4Rosa7UartStd5flushEv+0x22>
		dummy = *UDR;
     586:	18 96       	adiw	r26, 0x08	; 8
     588:	0d 90       	ld	r0, X+
     58a:	bc 91       	ld	r27, X
     58c:	a0 2d       	mov	r26, r0
     58e:	8c 91       	ld	r24, X
	}

void UartStd::flush( void ) const
{
	uint8_t dummy;
	while (*UCSRA & RX_COMPLETE)
     590:	80 81       	ld	r24, Z
     592:	88 23       	and	r24, r24
     594:	e4 f3       	brlt	.-8      	; 0x58e <_ZNK4Rosa7UartStd5flushEv+0x1a>
		dummy = *UDR;
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <_GLOBAL__sub_I__ZN4Rosa5UART1E>:



     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
		volatile uint8_t* uart_UDR):
		UCSRA(uart_UCSRA),
		UCSRB(uart_UCSRB),
		UCSRC(uart_UCSRC),
		UBRR(uart_UBRR),
		UDR(uart_UDR){
     5a0:	88 ec       	ldi	r24, 0xC8	; 200
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 2b 01 	sts	0x012B, r25
     5a8:	80 93 2a 01 	sts	0x012A, r24
     5ac:	89 ec       	ldi	r24, 0xC9	; 201
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	90 93 2d 01 	sts	0x012D, r25
     5b4:	80 93 2c 01 	sts	0x012C, r24
     5b8:	8a ec       	ldi	r24, 0xCA	; 202
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 2f 01 	sts	0x012F, r25
     5c0:	80 93 2e 01 	sts	0x012E, r24
     5c4:	8c ec       	ldi	r24, 0xCC	; 204
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	90 93 31 01 	sts	0x0131, r25
     5cc:	80 93 30 01 	sts	0x0130, r24
     5d0:	8e ec       	ldi	r24, 0xCE	; 206
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	90 93 33 01 	sts	0x0133, r25
     5d8:	80 93 32 01 	sts	0x0132, r24
			config = (UartConfig*) malloc(sizeof(UartConfig));
     5dc:	86 e0       	ldi	r24, 0x06	; 6
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <malloc>
     5e4:	e8 2f       	mov	r30, r24
     5e6:	f9 2f       	mov	r31, r25
     5e8:	f0 93 35 01 	sts	0x0135, r31
     5ec:	e0 93 34 01 	sts	0x0134, r30
			config->baud = 9600;
     5f0:	c0 e8       	ldi	r28, 0x80	; 128
     5f2:	d5 e2       	ldi	r29, 0x25	; 37
     5f4:	d1 83       	std	Z+1, r29	; 0x01
     5f6:	c0 83       	st	Z, r28
			config->parity = false;
     5f8:	12 82       	std	Z+2, r1	; 0x02
			config->stopbit = 0;
     5fa:	13 82       	std	Z+3, r1	; 0x03
			config->interrupt = NULL;
     5fc:	15 82       	std	Z+5, r1	; 0x05
     5fe:	14 82       	std	Z+4, r1	; 0x04
		volatile uint8_t* uart_UDR):
		UCSRA(uart_UCSRA),
		UCSRB(uart_UCSRB),
		UCSRC(uart_UCSRC),
		UBRR(uart_UBRR),
		UDR(uart_UDR){
     600:	80 ec       	ldi	r24, 0xC0	; 192
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	90 93 1f 01 	sts	0x011F, r25
     608:	80 93 1e 01 	sts	0x011E, r24
     60c:	81 ec       	ldi	r24, 0xC1	; 193
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 21 01 	sts	0x0121, r25
     614:	80 93 20 01 	sts	0x0120, r24
     618:	82 ec       	ldi	r24, 0xC2	; 194
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	90 93 23 01 	sts	0x0123, r25
     620:	80 93 22 01 	sts	0x0122, r24
     624:	84 ec       	ldi	r24, 0xC4	; 196
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 25 01 	sts	0x0125, r25
     62c:	80 93 24 01 	sts	0x0124, r24
     630:	86 ec       	ldi	r24, 0xC6	; 198
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 27 01 	sts	0x0127, r25
     638:	80 93 26 01 	sts	0x0126, r24
			config = (UartConfig*) malloc(sizeof(UartConfig));
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 60 08 	call	0x10c0	; 0x10c0 <malloc>
     644:	e8 2f       	mov	r30, r24
     646:	f9 2f       	mov	r31, r25
     648:	f0 93 29 01 	sts	0x0129, r31
     64c:	e0 93 28 01 	sts	0x0128, r30
			config->baud = 9600;
     650:	d1 83       	std	Z+1, r29	; 0x01
     652:	c0 83       	st	Z, r28
			config->parity = false;
     654:	12 82       	std	Z+2, r1	; 0x02
			config->stopbit = 0;
     656:	13 82       	std	Z+3, r1	; 0x03
			config->interrupt = NULL;
     658:	15 82       	std	Z+5, r1	; 0x05
     65a:	14 82       	std	Z+4, r1	; 0x04
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <_Z16setAllRelaysROSAv>:
		}
	}
	else{return;}
}
void setAllRelaysROSA()
{
     662:	cf 93       	push	r28
	relaysMask1 = relaysMask1&configMask1;
     664:	90 91 64 01 	lds	r25, 0x0164
     668:	80 91 66 01 	lds	r24, 0x0166
     66c:	89 23       	and	r24, r25
     66e:	80 93 64 01 	sts	0x0164, r24
	relaysMask2 = relaysMask2&configMask2;
     672:	60 91 65 01 	lds	r22, 0x0165
     676:	80 91 63 01 	lds	r24, 0x0163
     67a:	68 23       	and	r22, r24
     67c:	60 93 63 01 	sts	0x0163, r22
	
	//Relay01=((relaysMask2 & (1<<1))==0x00);
	//Relay01.unset();
	Relay02=((relaysMask2 & (1<<2))==0x00);
     680:	c1 e0       	ldi	r28, 0x01	; 1
     682:	62 fb       	bst	r22, 2
     684:	66 27       	eor	r22, r22
     686:	60 f9       	bld	r22, 0
     688:	6c 27       	eor	r22, r28
     68a:	80 e6       	ldi	r24, 0x60	; 96
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay03=((relaysMask2 & (1<<3))==0x00);
     692:	60 91 63 01 	lds	r22, 0x0163
     696:	63 fb       	bst	r22, 3
     698:	66 27       	eor	r22, r22
     69a:	60 f9       	bld	r22, 0
     69c:	6c 27       	eor	r22, r28
     69e:	8d e5       	ldi	r24, 0x5D	; 93
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay04=((relaysMask2 & (1<<4))==0x00);
     6a6:	60 91 63 01 	lds	r22, 0x0163
     6aa:	62 95       	swap	r22
     6ac:	61 70       	andi	r22, 0x01	; 1
     6ae:	6c 27       	eor	r22, r28
     6b0:	8a e5       	ldi	r24, 0x5A	; 90
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay05=((relaysMask2 & (1<<5))==0x00);
     6b8:	60 91 63 01 	lds	r22, 0x0163
     6bc:	65 fb       	bst	r22, 5
     6be:	66 27       	eor	r22, r22
     6c0:	60 f9       	bld	r22, 0
     6c2:	6c 27       	eor	r22, r28
     6c4:	87 e5       	ldi	r24, 0x57	; 87
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay06=((relaysMask2 & (1<<6))==0x00);
     6cc:	60 91 63 01 	lds	r22, 0x0163
     6d0:	66 fb       	bst	r22, 6
     6d2:	66 27       	eor	r22, r22
     6d4:	60 f9       	bld	r22, 0
     6d6:	6c 27       	eor	r22, r28
     6d8:	84 e5       	ldi	r24, 0x54	; 84
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay07=((relaysMask2 & (1<<7))==0x00);
     6e0:	60 91 63 01 	lds	r22, 0x0163
     6e4:	60 95       	com	r22
     6e6:	66 1f       	adc	r22, r22
     6e8:	66 27       	eor	r22, r22
     6ea:	66 1f       	adc	r22, r22
     6ec:	81 e5       	ldi	r24, 0x51	; 81
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay08=((relaysMask1 & (1<<0))==0x00);
     6f4:	60 91 64 01 	lds	r22, 0x0164
     6f8:	6c 27       	eor	r22, r28
     6fa:	61 70       	andi	r22, 0x01	; 1
     6fc:	8e e4       	ldi	r24, 0x4E	; 78
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay09=((relaysMask1 & (1<<1))==0x00);
     704:	60 91 64 01 	lds	r22, 0x0164
     708:	66 95       	lsr	r22
     70a:	61 70       	andi	r22, 0x01	; 1
     70c:	6c 27       	eor	r22, r28
     70e:	8b e4       	ldi	r24, 0x4B	; 75
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay10=((relaysMask1 & (1<<2))==0x00);
     716:	60 91 64 01 	lds	r22, 0x0164
     71a:	62 fb       	bst	r22, 2
     71c:	66 27       	eor	r22, r22
     71e:	60 f9       	bld	r22, 0
     720:	6c 27       	eor	r22, r28
     722:	88 e4       	ldi	r24, 0x48	; 72
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay11=((relaysMask1 & (1<<3))==0x00);
     72a:	60 91 64 01 	lds	r22, 0x0164
     72e:	63 fb       	bst	r22, 3
     730:	66 27       	eor	r22, r22
     732:	60 f9       	bld	r22, 0
     734:	6c 27       	eor	r22, r28
     736:	85 e4       	ldi	r24, 0x45	; 69
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
	Relay12=((relaysMask1 & (1<<4))==0x00);
     73e:	60 91 64 01 	lds	r22, 0x0164
     742:	62 95       	swap	r22
     744:	61 70       	andi	r22, 0x01	; 1
     746:	6c 27       	eor	r22, r28
     748:	82 e4       	ldi	r24, 0x42	; 66
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 76 00 	call	0xec	; 0xec <_ZN6OutBitaSEb>
}
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <_Z15ROSAPortsConfigv>:
	//PORTA= 0b11111111;
	//DDRA= 0b11111111;

	// Port B initialization
	// Func7=NC Func6=NC Func5=NC Func4=NC Func3=AD_DOUT Func2=AD_DIN Func1=AD_SCLK Func0=AD_CS#
	PORTB=0b00000000;
     754:	15 b8       	out	0x05, r1	; 5
	DDRB= 0b00000111;
     756:	87 e0       	ldi	r24, 0x07	; 7
     758:	84 b9       	out	0x04, r24	; 4
// 	PORTC=0b00011111;
// 	DDRC=0b01011111;

	// Port D initialization
	// NC
	PORTD=0x00;
     75a:	1b b8       	out	0x0b, r1	; 11
	DDRD=0x00;
     75c:	1a b8       	out	0x0a, r1	; 10

	// Port E initialization
	// NC
	PORTE=0x00;
     75e:	1e b8       	out	0x0e, r1	; 14
	DDRE=0x00;
     760:	1d b8       	out	0x0d, r1	; 13

	// Port F initialization
	// Func7=NC Func6=Left_Inclinometer Func5=Right_Inclinometer Func4=Key_Inclinometer Func3=ADC_5V Func2=ADC_12V Func1=Base_Inclinometer Func0=ADC_24V
	PORTF=0x00;
     762:	11 ba       	out	0x11, r1	; 17
	DDRF=0x00;
     764:	10 ba       	out	0x10, r1	; 16

	// Port G initialization
	// NC
	PORTG=0x00;
     766:	14 ba       	out	0x14, r1	; 20
	DDRG=0x00;
     768:	13 ba       	out	0x13, r1	; 19
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=FFh
	// OC0 output: Disconnected
	TCCR0A=0x00;
     76a:	14 bc       	out	0x24, r1	; 36
	TCNT0=0x00;
     76c:	16 bc       	out	0x26, r1	; 38
	OCR0A=0x00;
     76e:	17 bc       	out	0x27, r1	; 39
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=0x00;
     770:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x00;
     774:	10 92 81 00 	sts	0x0081, r1
	TCNT1H=0x00;
     778:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0x00;
     77c:	10 92 84 00 	sts	0x0084, r1
	ICR1H=0x00;
     780:	10 92 87 00 	sts	0x0087, r1
	ICR1L=0x00;
     784:	10 92 86 00 	sts	0x0086, r1
	OCR1AH=0x00;
     788:	10 92 89 00 	sts	0x0089, r1
	OCR1AL=0x00;
     78c:	10 92 88 00 	sts	0x0088, r1
	OCR1BH=0x00;
     790:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL=0x00;
     794:	10 92 8a 00 	sts	0x008A, r1
	OCR1CH=0x00;
     798:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL=0x00;
     79c:	10 92 8c 00 	sts	0x008C, r1
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
     7a0:	10 92 b6 00 	sts	0x00B6, r1
	TCCR2A=0x00;
     7a4:	10 92 b0 00 	sts	0x00B0, r1
	TCNT2=0x00;
     7a8:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A=0x00;
     7ac:	10 92 b3 00 	sts	0x00B3, r1
	// Timer 3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=0x00;
     7b0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B=0x00;
     7b4:	10 92 91 00 	sts	0x0091, r1
	TCNT3H=0x00;
     7b8:	10 92 95 00 	sts	0x0095, r1
	TCNT3L=0x00;
     7bc:	10 92 94 00 	sts	0x0094, r1
	ICR3H=0x00;
     7c0:	10 92 97 00 	sts	0x0097, r1
	ICR3L=0x00;
     7c4:	10 92 96 00 	sts	0x0096, r1
	OCR3AH=0x00;
     7c8:	10 92 99 00 	sts	0x0099, r1
	OCR3AL=0x00;
     7cc:	10 92 98 00 	sts	0x0098, r1
	OCR3BH=0x00;
     7d0:	10 92 9b 00 	sts	0x009B, r1
	OCR3BL=0x00;
     7d4:	10 92 9a 00 	sts	0x009A, r1
	OCR3CH=0x00;
     7d8:	10 92 9d 00 	sts	0x009D, r1
	OCR3CL=0x00;
     7dc:	10 92 9c 00 	sts	0x009C, r1
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: Off
	// INT7: Off
	EICRA=0x00;
     7e0:	10 92 69 00 	sts	0x0069, r1
	EICRB=0x00;
     7e4:	10 92 6a 00 	sts	0x006A, r1
	EIMSK=0x00;
     7e8:	1d ba       	out	0x1d, r1	; 29

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=0x00;
     7ea:	10 92 6e 00 	sts	0x006E, r1
	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=0x00;
     7ee:	10 92 6f 00 	sts	0x006F, r1
	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=0x00;
     7f2:	10 92 70 00 	sts	0x0070, r1
	// Timer/Counter 3 Interrupt(s) initialization
	TIMSK3=0x00;
     7f6:	10 92 71 00 	sts	0x0071, r1
	// 	UBRR1L=0x33;

	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	ACSR=0x80;
     7fa:	80 e8       	ldi	r24, 0x80	; 128
     7fc:	80 bf       	out	0x30, r24	; 48
	ADCSRB=0x00;
     7fe:	10 92 7b 00 	sts	0x007B, r1
	//SHT_ConnectionRest(); //T/H sensor
	
	// CAN Controller initialization
	// CAN: Off
	CANGCON=0x00;
     802:	10 92 d8 00 	sts	0x00D8, r1
	
	// deviceConfig and relays initialization
	configMask1=0xFF; configMask2=0xFE;
     806:	9f ef       	ldi	r25, 0xFF	; 255
     808:	90 93 66 01 	sts	0x0166, r25
     80c:	8e ef       	ldi	r24, 0xFE	; 254
     80e:	80 93 65 01 	sts	0x0165, r24
	relaysMask1=0xFF; relaysMask2=0xFE;
     812:	90 93 64 01 	sts	0x0164, r25
     816:	80 93 63 01 	sts	0x0163, r24
	
	setAllRelaysROSA();
     81a:	0e 94 31 03 	call	0x662	; 0x662 <_Z16setAllRelaysROSAv>
     81e:	08 95       	ret

00000820 <_GLOBAL__sub_I_buffer_dados>:
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     820:	82 e2       	ldi	r24, 0x22	; 34
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 61 01 	sts	0x0161, r25
     828:	80 93 60 01 	sts	0x0160, r24
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	20 93 62 01 	sts	0x0162, r18
		if(initial)
		*pt |= 1<<wbit;
     832:	11 9a       	sbi	0x02, 1	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     834:	09 9a       	sbi	0x01, 1	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     836:	90 93 5e 01 	sts	0x015E, r25
     83a:	80 93 5d 01 	sts	0x015D, r24
     83e:	32 e0       	ldi	r19, 0x02	; 2
     840:	30 93 5f 01 	sts	0x015F, r19
		if(initial)
		*pt |= 1<<wbit;
     844:	12 9a       	sbi	0x02, 2	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     846:	0a 9a       	sbi	0x01, 2	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     848:	90 93 5b 01 	sts	0x015B, r25
     84c:	80 93 5a 01 	sts	0x015A, r24
     850:	43 e0       	ldi	r20, 0x03	; 3
     852:	40 93 5c 01 	sts	0x015C, r20
		if(initial)
		*pt |= 1<<wbit;
     856:	13 9a       	sbi	0x02, 3	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     858:	0b 9a       	sbi	0x01, 3	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     85a:	90 93 58 01 	sts	0x0158, r25
     85e:	80 93 57 01 	sts	0x0157, r24
     862:	54 e0       	ldi	r21, 0x04	; 4
     864:	50 93 59 01 	sts	0x0159, r21
		if(initial)
		*pt |= 1<<wbit;
     868:	14 9a       	sbi	0x02, 4	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     86a:	0c 9a       	sbi	0x01, 4	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     86c:	90 93 55 01 	sts	0x0155, r25
     870:	80 93 54 01 	sts	0x0154, r24
     874:	55 e0       	ldi	r21, 0x05	; 5
     876:	50 93 56 01 	sts	0x0156, r21
		if(initial)
		*pt |= 1<<wbit;
     87a:	15 9a       	sbi	0x02, 5	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     87c:	0d 9a       	sbi	0x01, 5	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     87e:	90 93 52 01 	sts	0x0152, r25
     882:	80 93 51 01 	sts	0x0151, r24
     886:	56 e0       	ldi	r21, 0x06	; 6
     888:	50 93 53 01 	sts	0x0153, r21
		if(initial)
		*pt |= 1<<wbit;
     88c:	16 9a       	sbi	0x02, 6	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     88e:	0e 9a       	sbi	0x01, 6	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     890:	90 93 4f 01 	sts	0x014F, r25
     894:	80 93 4e 01 	sts	0x014E, r24
     898:	87 e0       	ldi	r24, 0x07	; 7
     89a:	80 93 50 01 	sts	0x0150, r24
		if(initial)
		*pt |= 1<<wbit;
     89e:	17 9a       	sbi	0x02, 7	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8a0:	0f 9a       	sbi	0x01, 7	; 1
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8a2:	88 e2       	ldi	r24, 0x28	; 40
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 4c 01 	sts	0x014C, r25
     8aa:	80 93 4b 01 	sts	0x014B, r24
     8ae:	10 92 4d 01 	sts	0x014D, r1
		if(initial)
		*pt |= 1<<wbit;
     8b2:	40 9a       	sbi	0x08, 0	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8b4:	38 9a       	sbi	0x07, 0	; 7
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8b6:	90 93 49 01 	sts	0x0149, r25
     8ba:	80 93 48 01 	sts	0x0148, r24
     8be:	20 93 4a 01 	sts	0x014A, r18
		if(initial)
		*pt |= 1<<wbit;
     8c2:	41 9a       	sbi	0x08, 1	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8c4:	39 9a       	sbi	0x07, 1	; 7
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8c6:	90 93 46 01 	sts	0x0146, r25
     8ca:	80 93 45 01 	sts	0x0145, r24
     8ce:	30 93 47 01 	sts	0x0147, r19
		if(initial)
		*pt |= 1<<wbit;
     8d2:	42 9a       	sbi	0x08, 2	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8d4:	3a 9a       	sbi	0x07, 2	; 7
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8d6:	90 93 43 01 	sts	0x0143, r25
     8da:	80 93 42 01 	sts	0x0142, r24
     8de:	40 93 44 01 	sts	0x0144, r20
		if(initial)
		*pt |= 1<<wbit;
     8e2:	43 9a       	sbi	0x08, 3	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8e4:	3b 9a       	sbi	0x07, 3	; 7
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8e6:	85 e2       	ldi	r24, 0x25	; 37
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 40 01 	sts	0x0140, r25
     8ee:	80 93 3f 01 	sts	0x013F, r24
     8f2:	40 93 41 01 	sts	0x0141, r20
		if(initial)
		*pt |= 1<<wbit;
     8f6:	2b 9a       	sbi	0x05, 3	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     8f8:	23 9a       	sbi	0x04, 3	; 4
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     8fa:	90 93 3d 01 	sts	0x013D, r25
     8fe:	80 93 3c 01 	sts	0x013C, r24
     902:	30 93 3e 01 	sts	0x013E, r19
		if(initial)
		*pt |= 1<<wbit;
     906:	2a 9a       	sbi	0x05, 2	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     908:	22 9a       	sbi	0x04, 2	; 4
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     90a:	90 93 3a 01 	sts	0x013A, r25
     90e:	80 93 39 01 	sts	0x0139, r24
     912:	20 93 3b 01 	sts	0x013B, r18
		if(initial)
		*pt |= 1<<wbit;
     916:	29 9a       	sbi	0x05, 1	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     918:	21 9a       	sbi	0x04, 1	; 4
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     91a:	90 93 37 01 	sts	0x0137, r25
     91e:	80 93 36 01 	sts	0x0136, r24
     922:	10 92 38 01 	sts	0x0138, r1
		if(initial)
		*pt |= 1<<wbit;
     926:	28 9a       	sbi	0x05, 0	; 5
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     928:	20 9a       	sbi	0x04, 0	; 4
     92a:	08 95       	ret

0000092c <main>:
#include "UartRosa.h"
#include "Velki485.h"
using namespace Rosa;

int main(void)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	6d 97       	sbiw	r28, 0x1d	; 29
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
	
	// Crystal Oscillator division factor: 1	
	CLKPR=0x80;
     940:	e1 e6       	ldi	r30, 0x61	; 97
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	80 83       	st	Z, r24
	CLKPR=0x00;
     948:	10 82       	st	Z, r1
	
	
	ROSAPortsConfig();
     94a:	0e 94 aa 03 	call	0x754	; 0x754 <_Z15ROSAPortsConfigv>
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     94e:	28 e2       	ldi	r18, 0x28	; 40
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	3d 8b       	std	Y+21, r19	; 0x15
     954:	2c 8b       	std	Y+20, r18	; 0x14
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	8e 8b       	std	Y+22, r24	; 0x16
		if(initial)
		*pt |= 1<<wbit;
     95a:	44 9a       	sbi	0x08, 4	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     95c:	ec 89       	ldd	r30, Y+20	; 0x14
     95e:	fd 89       	ldd	r31, Y+21	; 0x15
     960:	62 91       	ld	r22, -Z
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	ac 01       	movw	r20, r24
     968:	0e 88       	ldd	r0, Y+22	; 0x16
     96a:	02 c0       	rjmp	.+4      	; 0x970 <main+0x44>
     96c:	44 0f       	add	r20, r20
     96e:	55 1f       	adc	r21, r21
     970:	0a 94       	dec	r0
     972:	e2 f7       	brpl	.-8      	; 0x96c <main+0x40>
     974:	46 2b       	or	r20, r22
     976:	40 83       	st	Z, r20
	private:
	volatile uint8_t * pt;
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
     978:	3a 8b       	std	Y+18, r19	; 0x12
     97a:	29 8b       	std	Y+17, r18	; 0x11
     97c:	25 e0       	ldi	r18, 0x05	; 5
     97e:	2b 8b       	std	Y+19, r18	; 0x13
		if(initial)
		*pt |= 1<<wbit;
     980:	45 9a       	sbi	0x08, 5	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     982:	e9 89       	ldd	r30, Y+17	; 0x11
     984:	fa 89       	ldd	r31, Y+18	; 0x12
     986:	22 91       	ld	r18, -Z
     988:	0b 88       	ldd	r0, Y+19	; 0x13
     98a:	02 c0       	rjmp	.+4      	; 0x990 <main+0x64>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	0a 94       	dec	r0
     992:	e2 f7       	brpl	.-8      	; 0x98c <main+0x60>
     994:	82 2b       	or	r24, r18
     996:	80 83       	st	Z, r24
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
		if(initial)
		*pt |= 1<<wbit;
     998:	46 9a       	sbi	0x08, 6	; 8
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     99a:	3e 9a       	sbi	0x07, 6	; 7
	uint8_t wbit;
	
	public:
	OutBit(volatile uint8_t &port, char bit, bool initial = true ): pt(&port), wbit(bit) {
		if(initial)
		*pt |= 1<<wbit;
     99c:	10 9a       	sbi	0x02, 0	; 2
		else
		*pt &= ~(1<<wbit);
		
		*(pt - 1) |= 1<<wbit;
     99e:	08 9a       	sbi	0x01, 0	; 1

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
	
	inline OutBit unset(){*pt = *pt & ~(1<<wbit);	return *this;}
     9a0:	10 98       	cbi	0x02, 0	; 2
     9a2:	46 98       	cbi	0x08, 6	; 8
     9a4:	82 e3       	ldi	r24, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a6:	2f ef       	ldi	r18, 0xFF	; 255
     9a8:	31 ee       	ldi	r19, 0xE1	; 225
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	30 40       	sbci	r19, 0x00	; 0
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x80>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <main+0x8a>
     9b6:	00 00       	nop
     9b8:	81 50       	subi	r24, 0x01	; 1
	
	OutBit TX_485_en1(PORTC,4), RX_485_en1(PORTC,5), Eth_rst(PORTC,6), Eth_relay(PORTA,0);
	Eth_relay.unset();
	Eth_rst.unset();
	for(uint8_t i =0; i<50;i++)
     9ba:	a9 f7       	brne	.-22     	; 0x9a6 <main+0x7a>
	_delay_ms(200);
	
	uint8_t msg[3] = {0xAB, 0xCD, 0xEF};
	uint8_t msg2[2] = {0xA5, 0xB6};
     9bc:	85 ea       	ldi	r24, 0xA5	; 165
     9be:	8b 8f       	std	Y+27, r24	; 0x1b
     9c0:	86 eb       	ldi	r24, 0xB6	; 182
     9c2:	8c 8f       	std	Y+28, r24	; 0x1c
	UART1.enable();
     9c4:	8a e2       	ldi	r24, 0x2A	; 42
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZNK4Rosa7UartStd6enableEv>
	UART0.enable();
     9cc:	8e e1       	ldi	r24, 0x1E	; 30
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZNK4Rosa7UartStd6enableEv>
		private:
		const UartStd* uart;

		//functions
		public:
		UartRosa(const UartStd& uart_rosa): uart(&uart_rosa){}
     9d4:	8a e2       	ldi	r24, 0x2A	; 42
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9a 8f       	std	Y+26, r25	; 0x1a
     9da:	89 8f       	std	Y+25, r24	; 0x19
		//functions
		public:
		Rs485Std(const UartStd& uart485, OutBit& tx_enable_485, OutBit& rx_enable_485):
		uart(&uart485),
		tx_enable(&tx_enable_485),
		rx_enable(&rx_enable_485){
     9dc:	8e e1       	ldi	r24, 0x1E	; 30
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	9b 87       	std	Y+11, r25	; 0x0b
     9e2:	8a 87       	std	Y+10, r24	; 0x0a
     9e4:	ce 01       	movw	r24, r28
     9e6:	44 96       	adiw	r24, 0x14	; 20
     9e8:	9d 87       	std	Y+13, r25	; 0x0d
     9ea:	8c 87       	std	Y+12, r24	; 0x0c
     9ec:	ce 01       	movw	r24, r28
     9ee:	41 96       	adiw	r24, 0x11	; 17
     9f0:	9f 87       	std	Y+15, r25	; 0x0f
     9f2:	8e 87       	std	Y+14, r24	; 0x0e
     9f4:	ec 89       	ldd	r30, Y+20	; 0x14
     9f6:	fd 89       	ldd	r31, Y+21	; 0x15
     9f8:	40 81       	ld	r20, Z
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	9c 01       	movw	r18, r24
     a00:	0e 88       	ldd	r0, Y+22	; 0x16
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <main+0xdc>
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <main+0xd8>
     a0c:	20 95       	com	r18
     a0e:	24 23       	and	r18, r20
     a10:	20 83       	st	Z, r18
			tx_enable->unset();
			rx_enable->set();
     a12:	ae 85       	ldd	r26, Y+14	; 0x0e
     a14:	bf 85       	ldd	r27, Y+15	; 0x0f
	
	void operator=(OutBit value){operator=((bool)value);}

	inline OutBit toggle(){*pt = *pt ^ 1<<wbit;	return *this;}

	inline OutBit set(){*pt = *pt | 1<<wbit;	return *this;}
     a16:	ed 91       	ld	r30, X+
     a18:	fc 91       	ld	r31, X
     a1a:	11 97       	sbiw	r26, 0x01	; 1
     a1c:	20 81       	ld	r18, Z
     a1e:	12 96       	adiw	r26, 0x02	; 2
     a20:	0c 90       	ld	r0, X
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <main+0xfc>
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	0a 94       	dec	r0
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <main+0xf8>
     a2c:	82 2b       	or	r24, r18
     a2e:	80 83       	st	Z, r24
		bool initialized; //TO DO
		
		//functions
		public:
		Velki485(const UartStd& uart485, OutBit& tx_enable_485, OutBit& rx_enable_485):
		Rs485Std(uart485,tx_enable_485,rx_enable_485), initialized(false)
     a30:	18 8a       	std	Y+16, r1	; 0x10
		{
			initialize();
     a32:	ce 01       	movw	r24, r28
     a34:	0a 96       	adiw	r24, 0x0a	; 10
     a36:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN4Rosa8Velki48510initializeEv>
	UartRosa pccom = UartRosa(UART1);
	//Rs485Std profu = Rs485Std(UART0,TX_485_en1,RX_485_en1);
	Velki485 velki = Velki485(UART0,TX_485_en1,RX_485_en1);
	uint8_t pressure[9];
	uint8_t readed = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8_t errormsg[2] = {0xEE,0xBB};
     a3e:	8e ee       	ldi	r24, 0xEE	; 238
     a40:	8f 8b       	std	Y+23, r24	; 0x17
     a42:	8b eb       	ldi	r24, 0xBB	; 187
     a44:	88 8f       	std	Y+24, r24	; 0x18
	
	
	while(1)
	{
		if(velki.read_pressure(pressure))
     a46:	be 01       	movw	r22, r28
     a48:	6f 5f       	subi	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	ce 01       	movw	r24, r28
     a4e:	0a 96       	adiw	r24, 0x0a	; 10
     a50:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN4Rosa8Velki48513read_pressureEPh>
     a54:	88 23       	and	r24, r24
     a56:	49 f0       	breq	.+18     	; 0xa6a <main+0x13e>
		pccom.send_msg(9,pressure);
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	69 e0       	ldi	r22, 0x09	; 9
     a60:	ce 01       	movw	r24, r28
     a62:	49 96       	adiw	r24, 0x19	; 25
     a64:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN4Rosa8UartRosa8send_msgEhPh>
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <main+0x15e>
		else{
			pccom.send_msg(2,errormsg);
     a6a:	ae 01       	movw	r20, r28
     a6c:	49 5e       	subi	r20, 0xE9	; 233
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	ce 01       	movw	r24, r28
     a74:	49 96       	adiw	r24, 0x19	; 25
     a76:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN4Rosa8UartRosa8send_msgEhPh>
			pccom.send_msg(9,pressure);
     a7a:	ae 01       	movw	r20, r28
     a7c:	4f 5f       	subi	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	69 e0       	ldi	r22, 0x09	; 9
     a82:	ce 01       	movw	r24, r28
     a84:	49 96       	adiw	r24, 0x19	; 25
     a86:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN4Rosa8UartRosa8send_msgEhPh>
		}
		do
		{
			pccom.read_msg(readed,msg2);
     a8a:	ae 01       	movw	r20, r28
     a8c:	45 5e       	subi	r20, 0xE5	; 229
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	be 01       	movw	r22, r28
     a92:	63 5e       	subi	r22, 0xE3	; 227
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	ce 01       	movw	r24, r28
     a98:	49 96       	adiw	r24, 0x19	; 25
     a9a:	0e 94 99 01 	call	0x332	; 0x332 <_ZN4Rosa8UartRosa8read_msgERhPh>
		pccom.send_msg(9,pressure);
		else{
			pccom.send_msg(2,errormsg);
			pccom.send_msg(9,pressure);
		}
		do
     a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aa0:	8c 3a       	cpi	r24, 0xAC	; 172
     aa2:	99 f7       	brne	.-26     	; 0xa8a <main+0x15e>
     aa4:	d0 cf       	rjmp	.-96     	; 0xa46 <main+0x11a>

00000aa6 <_ZN4Rosa8Velki48510initializeEv>:
		return true; // NOT ALL FINE - CHECK STAT pressure_msg[6] BYTE!!
		
	}

	bool Velki485::initialize( void )
	{
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	2f 97       	sbiw	r28, 0x0f	; 15
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	5c 01       	movw	r10, r24
		
		uint8_t SensorInit[4] = {0xfa, 0x30, 0x04, 0x43};// 0xFA = 250 - Broadcast; 0x30 = 48 initialization; 0x0443 - CRC
     acc:	8a ef       	ldi	r24, 0xFA	; 250
     ace:	8b 87       	std	Y+11, r24	; 0x0b
     ad0:	80 e3       	ldi	r24, 0x30	; 48
     ad2:	8c 87       	std	Y+12, r24	; 0x0c
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	8d 87       	std	Y+13, r24	; 0x0d
     ad8:	83 e4       	ldi	r24, 0x43	; 67
     ada:	8e 87       	std	Y+14, r24	; 0x0e
		send_msg(4,SensorInit);
     adc:	ae 01       	movw	r20, r28
     ade:	45 5f       	subi	r20, 0xF5	; 245
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	8a 2d       	mov	r24, r10
     ae6:	9b 2d       	mov	r25, r11
     ae8:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN4Rosa8Rs485Std8send_msgEhPh>
		uint8_t answer[10];
		uint8_t received_size = 10;
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	8f 87       	std	Y+15, r24	; 0x0f
		
		if(!read_msg(received_size,answer,1.8,100)){
     af0:	0f 2e       	mov	r0, r31
     af2:	c1 2c       	mov	r12, r1
     af4:	d1 2c       	mov	r13, r1
     af6:	f8 ec       	ldi	r31, 0xC8	; 200
     af8:	ef 2e       	mov	r14, r31
     afa:	f2 e4       	ldi	r31, 0x42	; 66
     afc:	ff 2e       	mov	r15, r31
     afe:	f0 2d       	mov	r31, r0
     b00:	06 e6       	ldi	r16, 0x66	; 102
     b02:	16 e6       	ldi	r17, 0x66	; 102
     b04:	26 ee       	ldi	r18, 0xE6	; 230
     b06:	3f e3       	ldi	r19, 0x3F	; 63
     b08:	ae 01       	movw	r20, r28
     b0a:	4f 5f       	subi	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	be 01       	movw	r22, r28
     b10:	61 5f       	subi	r22, 0xF1	; 241
     b12:	7f 4f       	sbci	r23, 0xFF	; 255
     b14:	8a 2d       	mov	r24, r10
     b16:	9b 2d       	mov	r25, r11
     b18:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN4Rosa8Rs485Std8read_msgERhPhff>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <_ZN4Rosa8Velki48510initializeEv+0x8e>
     b20:	8f ec       	ldi	r24, 0xCF	; 207
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <_ZN4Rosa8Velki48510initializeEv+0x7e>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <_ZN4Rosa8Velki48510initializeEv+0x84>
     b2a:	00 00       	nop
			_delay_ms(1);
			return (initialized = false);
     b2c:	f5 01       	movw	r30, r10
     b2e:	16 82       	std	Z+6, r1	; 0x06
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	53 c0       	rjmp	.+166    	; 0xbda <_ZN4Rosa8Velki48510initializeEv+0x134>
     b34:	8f ec       	ldi	r24, 0xCF	; 207
     b36:	97 e0       	ldi	r25, 0x07	; 7
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <_ZN4Rosa8Velki48510initializeEv+0x92>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <_ZN4Rosa8Velki48510initializeEv+0x98>
     b3e:	00 00       	nop
		}
		
		_delay_ms(1);
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];
     b40:	4f 85       	ldd	r20, Y+15	; 0x0f
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	ca 01       	movw	r24, r20
     b46:	02 97       	sbiw	r24, 0x02	; 2
     b48:	fe 01       	movw	r30, r28
     b4a:	e8 0f       	add	r30, r24
     b4c:	f9 1f       	adc	r31, r25
     b4e:	31 81       	ldd	r19, Z+1	; 0x01
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	fe 01       	movw	r30, r28
     b54:	e4 0f       	add	r30, r20
     b56:	f5 1f       	adc	r31, r21
     b58:	40 81       	ld	r20, Z
     b5a:	b9 01       	movw	r22, r18
     b5c:	64 0f       	add	r22, r20
     b5e:	71 1d       	adc	r23, r1

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
     b60:	18 16       	cp	r1, r24
     b62:	19 06       	cpc	r1, r25
     b64:	0c f0       	brlt	.+2      	; 0xb68 <_ZN4Rosa8Velki48510initializeEv+0xc2>
     b66:	2a c0       	rjmp	.+84     	; 0xbbc <_ZN4Rosa8Velki48510initializeEv+0x116>
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
     b6e:	2f ef       	ldi	r18, 0xFF	; 255
     b70:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, answer[i]);
     b72:	a1 e0       	ldi	r26, 0x01	; 1
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ac 0f       	add	r26, r28
     b78:	bd 1f       	adc	r27, r29
     b7a:	a4 0f       	add	r26, r20
     b7c:	b5 1f       	adc	r27, r21
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
     b7e:	4c 91       	ld	r20, X
     b80:	24 27       	eor	r18, r20
     b82:	42 2f       	mov	r20, r18
     b84:	42 95       	swap	r20
     b86:	42 27       	eor	r20, r18
     b88:	04 2e       	mov	r0, r20
     b8a:	46 95       	lsr	r20
     b8c:	46 95       	lsr	r20
     b8e:	40 25       	eor	r20, r0
     b90:	04 2e       	mov	r0, r20
     b92:	46 95       	lsr	r20
     b94:	40 25       	eor	r20, r0
     b96:	47 70       	andi	r20, 0x07	; 7
     b98:	02 2e       	mov	r0, r18
     b9a:	23 2f       	mov	r18, r19
     b9c:	46 95       	lsr	r20
     b9e:	07 94       	ror	r0
     ba0:	47 95       	ror	r20
     ba2:	30 2d       	mov	r19, r0
     ba4:	24 27       	eor	r18, r20
     ba6:	06 94       	lsr	r0
     ba8:	47 95       	ror	r20
     baa:	30 25       	eor	r19, r0
     bac:	24 27       	eor	r18, r20
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
     bae:	ef 5f       	subi	r30, 0xFF	; 255
     bb0:	4e 2f       	mov	r20, r30
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	48 17       	cp	r20, r24
     bb6:	59 07       	cpc	r21, r25
     bb8:	e4 f2       	brlt	.-72     	; 0xb72 <_ZN4Rosa8Velki48510initializeEv+0xcc>
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <_ZN4Rosa8Velki48510initializeEv+0x11a>
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (answer[received_size-2]<<8) + answer[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, answer[i]);

		if(CRC != CRCRec || answer[1]!=0x30)
     bc0:	26 17       	cp	r18, r22
     bc2:	37 07       	cpc	r19, r23
     bc4:	19 f4       	brne	.+6      	; 0xbcc <_ZN4Rosa8Velki48510initializeEv+0x126>
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	80 33       	cpi	r24, 0x30	; 48
     bca:	21 f0       	breq	.+8      	; 0xbd4 <_ZN4Rosa8Velki48510initializeEv+0x12e>
		return (initialized = false); //CRC ERROR
     bcc:	f5 01       	movw	r30, r10
     bce:	16 82       	std	Z+6, r1	; 0x06
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <_ZN4Rosa8Velki48510initializeEv+0x134>
		
		return (initialized = true);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	f5 01       	movw	r30, r10
     bd8:	86 83       	std	Z+6, r24	; 0x06
	}
     bda:	2f 96       	adiw	r28, 0x0f	; 15
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	08 95       	ret

00000bfc <_ZN4Rosa8Velki48513read_pressureEPh>:
	Velki485::~Velki485()
	{
	} //~Velki485

	bool Velki485::read_pressure( uint8_t pressure_msg[9])
	{
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	2f 97       	sbiw	r28, 0x0f	; 15
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	4c 01       	movw	r8, r24
     c26:	5b 01       	movw	r10, r22
		
		uint8_t ReqPressure1[5] = {0xfa, 0x49, 0x01, 0xa1, 0xa7}; //0xFA = 250 - Broadcast; 0x49 = 73 Read value; 0x01 - Pressure from pressure sensor 1 (bar); 0xa1a7 - CRC
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	e6 e0       	ldi	r30, 0x06	; 6
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	de 01       	movw	r26, r28
     c30:	1a 96       	adiw	r26, 0x0a	; 10
     c32:	01 90       	ld	r0, Z+
     c34:	0d 92       	st	X+, r0
     c36:	8a 95       	dec	r24
     c38:	e1 f7       	brne	.-8      	; 0xc32 <_ZN4Rosa8Velki48513read_pressureEPh+0x36>
			}
		
		void send_msg(uint8_t data_length, uint8_t *msg);
		uint8_t read_msg(uint8_t data_length, uint8_t *msg);
		bool read_msg( uint8_t& data_length, uint8_t *msg, float byte_timeout, float response_timeout);
		void flush(void){uart->flush();}
     c3a:	d4 01       	movw	r26, r8
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	0e 94 ba 02 	call	0x574	; 0x574 <_ZNK4Rosa7UartStd5flushEv>
		
		flush();
		send_msg(5,ReqPressure1);
     c44:	ae 01       	movw	r20, r28
     c46:	46 5f       	subi	r20, 0xF6	; 246
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	65 e0       	ldi	r22, 0x05	; 5
     c4c:	88 2d       	mov	r24, r8
     c4e:	99 2d       	mov	r25, r9
     c50:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN4Rosa8Rs485Std8send_msgEhPh>
		
		uint8_t received_size = 9;
     c54:	89 e0       	ldi	r24, 0x09	; 9
     c56:	8f 87       	std	Y+15, r24	; 0x0f
		if(!read_msg(received_size,pressure_msg,1.8,500))
     c58:	0f 2e       	mov	r0, r31
     c5a:	c1 2c       	mov	r12, r1
     c5c:	d1 2c       	mov	r13, r1
     c5e:	fa ef       	ldi	r31, 0xFA	; 250
     c60:	ef 2e       	mov	r14, r31
     c62:	f3 e4       	ldi	r31, 0x43	; 67
     c64:	ff 2e       	mov	r15, r31
     c66:	f0 2d       	mov	r31, r0
     c68:	06 e6       	ldi	r16, 0x66	; 102
     c6a:	16 e6       	ldi	r17, 0x66	; 102
     c6c:	26 ee       	ldi	r18, 0xE6	; 230
     c6e:	3f e3       	ldi	r19, 0x3F	; 63
     c70:	a5 01       	movw	r20, r10
     c72:	be 01       	movw	r22, r28
     c74:	61 5f       	subi	r22, 0xF1	; 241
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	88 2d       	mov	r24, r8
     c7a:	99 2d       	mov	r25, r9
     c7c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN4Rosa8Rs485Std8read_msgERhPhff>
     c80:	81 11       	cpse	r24, r1
     c82:	25 c0       	rjmp	.+74     	; 0xcce <_ZN4Rosa8Velki48513read_pressureEPh+0xd2>
		if (received_size<5){
     c84:	8f 85       	ldd	r24, Y+15	; 0x0f
     c86:	85 30       	cpi	r24, 0x05	; 5
     c88:	10 f5       	brcc	.+68     	; 0xcce <_ZN4Rosa8Velki48513read_pressureEPh+0xd2>
     c8a:	ef ec       	ldi	r30, 0xCF	; 207
     c8c:	f7 e0       	ldi	r31, 0x07	; 7
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <_ZN4Rosa8Velki48513read_pressureEPh+0x92>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <_ZN4Rosa8Velki48513read_pressureEPh+0x98>
     c94:	00 00       	nop
			_delay_ms(1);
			uint8_t badanswer[9]={0x12, 0xaa, 0xbb, received_size, 0x12, 0xaa, 0xbb, 0x00, 0x1B};
     c96:	fe 01       	movw	r30, r28
     c98:	31 96       	adiw	r30, 0x01	; 1
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	df 01       	movw	r26, r30
     c9e:	1d 92       	st	X+, r1
     ca0:	8a 95       	dec	r24
     ca2:	e9 f7       	brne	.-6      	; 0xc9e <_ZN4Rosa8Velki48513read_pressureEPh+0xa2>
     ca4:	3f 85       	ldd	r19, Y+15	; 0x0f
			memcpy(pressure_msg,badanswer,9);
     ca6:	22 e1       	ldi	r18, 0x12	; 18
     ca8:	29 83       	std	Y+1, r18	; 0x01
     caa:	9a ea       	ldi	r25, 0xAA	; 170
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	8b eb       	ldi	r24, 0xBB	; 187
     cb0:	8b 83       	std	Y+3, r24	; 0x03
     cb2:	3c 83       	std	Y+4, r19	; 0x04
     cb4:	2d 83       	std	Y+5, r18	; 0x05
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	8b e1       	ldi	r24, 0x1B	; 27
     cbc:	89 87       	std	Y+9, r24	; 0x09
     cbe:	89 e0       	ldi	r24, 0x09	; 9
     cc0:	d5 01       	movw	r26, r10
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	8a 95       	dec	r24
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <_ZN4Rosa8Velki48513read_pressureEPh+0xc6>
			return false;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	76 c0       	rjmp	.+236    	; 0xdba <_ZN4Rosa8Velki48513read_pressureEPh+0x1be>
     cce:	ef ec       	ldi	r30, 0xCF	; 207
     cd0:	f7 e0       	ldi	r31, 0x07	; 7
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <_ZN4Rosa8Velki48513read_pressureEPh+0xd6>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <_ZN4Rosa8Velki48513read_pressureEPh+0xdc>
     cd8:	00 00       	nop
		}
		
		_delay_ms(1);
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (pressure_msg[received_size-2]<<8) + pressure_msg[received_size-1];
     cda:	4f 85       	ldd	r20, Y+15	; 0x0f
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	95 01       	movw	r18, r10
     ce0:	24 0f       	add	r18, r20
     ce2:	35 1f       	adc	r19, r21
     ce4:	f9 01       	movw	r30, r18
     ce6:	32 97       	sbiw	r30, 0x02	; 2
     ce8:	90 81       	ld	r25, Z
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	20 81       	ld	r18, Z
     cf2:	bc 01       	movw	r22, r24
     cf4:	62 0f       	add	r22, r18
     cf6:	71 1d       	adc	r23, r1

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
     cf8:	42 50       	subi	r20, 0x02	; 2
     cfa:	51 09       	sbc	r21, r1
     cfc:	14 16       	cp	r1, r20
     cfe:	15 06       	cpc	r1, r21
     d00:	2c f5       	brge	.+74     	; 0xd4c <_ZN4Rosa8Velki48513read_pressureEPh+0x150>
     d02:	a0 e0       	ldi	r26, 0x00	; 0
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (pressure_msg[received_size-2]<<8) + pressure_msg[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, pressure_msg[i]);
     d08:	f5 01       	movw	r30, r10
     d0a:	ea 0f       	add	r30, r26
     d0c:	f1 1d       	adc	r31, r1
     d0e:	80 81       	ld	r24, Z
     d10:	28 27       	eor	r18, r24
     d12:	82 2f       	mov	r24, r18
     d14:	82 95       	swap	r24
     d16:	82 27       	eor	r24, r18
     d18:	08 2e       	mov	r0, r24
     d1a:	86 95       	lsr	r24
     d1c:	86 95       	lsr	r24
     d1e:	80 25       	eor	r24, r0
     d20:	08 2e       	mov	r0, r24
     d22:	86 95       	lsr	r24
     d24:	80 25       	eor	r24, r0
     d26:	87 70       	andi	r24, 0x07	; 7
     d28:	02 2e       	mov	r0, r18
     d2a:	23 2f       	mov	r18, r19
     d2c:	86 95       	lsr	r24
     d2e:	07 94       	ror	r0
     d30:	87 95       	ror	r24
     d32:	30 2d       	mov	r19, r0
     d34:	28 27       	eor	r18, r24
     d36:	06 94       	lsr	r0
     d38:	87 95       	ror	r24
     d3a:	30 25       	eor	r19, r0
     d3c:	28 27       	eor	r18, r24
		// CRC16 recebido do sensor
		uint16_t CRCRec = (pressure_msg[received_size-2]<<8) + pressure_msg[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
		for(uint8_t i=0; i < (received_size-2); i++)
     d3e:	af 5f       	subi	r26, 0xFF	; 255
     d40:	8a 2f       	mov	r24, r26
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	84 17       	cp	r24, r20
     d46:	95 07       	cpc	r25, r21
     d48:	fc f2       	brlt	.-66     	; 0xd08 <_ZN4Rosa8Velki48513read_pressureEPh+0x10c>
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <_ZN4Rosa8Velki48513read_pressureEPh+0x154>
		
		// CRC16 recebido do sensor
		uint16_t CRCRec = (pressure_msg[received_size-2]<<8) + pressure_msg[received_size-1];

		// Calculo de CRC16 dos dados recebidos
		uint16_t CRC = 0xFFFF;
     d4c:	2f ef       	ldi	r18, 0xFF	; 255
     d4e:	3f ef       	ldi	r19, 0xFF	; 255
		for(uint8_t i=0; i < (received_size-2); i++)
		CRC = _crc16_update(CRC, pressure_msg[i]);

		if(CRC != CRCRec){
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	99 f0       	breq	.+38     	; 0xd7c <_ZN4Rosa8Velki48513read_pressureEPh+0x180>
			uint8_t badcrc[9]={0x00, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x9B, 0x45};
     d56:	89 e0       	ldi	r24, 0x09	; 9
     d58:	eb e0       	ldi	r30, 0x0B	; 11
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	de 01       	movw	r26, r28
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	8a 95       	dec	r24
     d66:	e1 f7       	brne	.-8      	; 0xd60 <_ZN4Rosa8Velki48513read_pressureEPh+0x164>
			memcpy(pressure_msg,badcrc,9);			
     d68:	89 e0       	ldi	r24, 0x09	; 9
     d6a:	fe 01       	movw	r30, r28
     d6c:	31 96       	adiw	r30, 0x01	; 1
     d6e:	d5 01       	movw	r26, r10
     d70:	01 90       	ld	r0, Z+
     d72:	0d 92       	st	X+, r0
     d74:	8a 95       	dec	r24
     d76:	e1 f7       	brne	.-8      	; 0xd70 <_ZN4Rosa8Velki48513read_pressureEPh+0x174>
			return false; //CRC ERROR
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	1f c0       	rjmp	.+62     	; 0xdba <_ZN4Rosa8Velki48513read_pressureEPh+0x1be>
		}
		
		if (pressure_msg[1]&(1<<7)){ //EXCEPTION
     d7c:	d5 01       	movw	r26, r10
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	8c 91       	ld	r24, X
     d82:	88 23       	and	r24, r24
     d84:	cc f4       	brge	.+50     	; 0xdb8 <_ZN4Rosa8Velki48513read_pressureEPh+0x1bc>
			if ((pressure_msg[1]&~(1<<7))==0x20) //NOT INITIALIZED
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	80 32       	cpi	r24, 0x20	; 32
     d8a:	19 f4       	brne	.+6      	; 0xd92 <_ZN4Rosa8Velki48513read_pressureEPh+0x196>
			initialize();
     d8c:	c4 01       	movw	r24, r8
     d8e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN4Rosa8Velki48510initializeEv>
			uint8_t noinit[9]={1,2,3,4,5,6,7,0x71,0x1D};
     d92:	89 e0       	ldi	r24, 0x09	; 9
     d94:	e4 e1       	ldi	r30, 0x14	; 20
     d96:	f1 e0       	ldi	r31, 0x01	; 1
     d98:	de 01       	movw	r26, r28
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	01 90       	ld	r0, Z+
     d9e:	0d 92       	st	X+, r0
     da0:	8a 95       	dec	r24
     da2:	e1 f7       	brne	.-8      	; 0xd9c <_ZN4Rosa8Velki48513read_pressureEPh+0x1a0>
			memcpy(pressure_msg,noinit,9);
     da4:	89 e0       	ldi	r24, 0x09	; 9
     da6:	fe 01       	movw	r30, r28
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	d5 01       	movw	r26, r10
     dac:	01 90       	ld	r0, Z+
     dae:	0d 92       	st	X+, r0
     db0:	8a 95       	dec	r24
     db2:	e1 f7       	brne	.-8      	; 0xdac <_ZN4Rosa8Velki48513read_pressureEPh+0x1b0>
			return false;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	01 c0       	rjmp	.+2      	; 0xdba <_ZN4Rosa8Velki48513read_pressureEPh+0x1be>
		}
		
		
		return true; // NOT ALL FINE - CHECK STAT pressure_msg[6] BYTE!!
     db8:	81 e0       	ldi	r24, 0x01	; 1
		
	}
     dba:	2f 96       	adiw	r28, 0x0f	; 15
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	08 95       	ret

00000de0 <__divsf3>:
     de0:	0c d0       	rcall	.+24     	; 0xdfa <__divsf3x>
     de2:	a9 c0       	rjmp	.+338    	; 0xf36 <__fp_round>
     de4:	a1 d0       	rcall	.+322    	; 0xf28 <__fp_pscB>
     de6:	40 f0       	brcs	.+16     	; 0xdf8 <__divsf3+0x18>
     de8:	98 d0       	rcall	.+304    	; 0xf1a <__fp_pscA>
     dea:	30 f0       	brcs	.+12     	; 0xdf8 <__divsf3+0x18>
     dec:	21 f4       	brne	.+8      	; 0xdf6 <__divsf3+0x16>
     dee:	5f 3f       	cpi	r21, 0xFF	; 255
     df0:	19 f0       	breq	.+6      	; 0xdf8 <__divsf3+0x18>
     df2:	8a c0       	rjmp	.+276    	; 0xf08 <__fp_inf>
     df4:	51 11       	cpse	r21, r1
     df6:	d3 c0       	rjmp	.+422    	; 0xf9e <__fp_szero>
     df8:	8d c0       	rjmp	.+282    	; 0xf14 <__fp_nan>

00000dfa <__divsf3x>:
     dfa:	ae d0       	rcall	.+348    	; 0xf58 <__fp_split3>
     dfc:	98 f3       	brcs	.-26     	; 0xde4 <__divsf3+0x4>

00000dfe <__divsf3_pse>:
     dfe:	99 23       	and	r25, r25
     e00:	c9 f3       	breq	.-14     	; 0xdf4 <__divsf3+0x14>
     e02:	55 23       	and	r21, r21
     e04:	b1 f3       	breq	.-20     	; 0xdf2 <__divsf3+0x12>
     e06:	95 1b       	sub	r25, r21
     e08:	55 0b       	sbc	r21, r21
     e0a:	bb 27       	eor	r27, r27
     e0c:	aa 27       	eor	r26, r26
     e0e:	62 17       	cp	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	38 f0       	brcs	.+14     	; 0xe24 <__divsf3_pse+0x26>
     e16:	9f 5f       	subi	r25, 0xFF	; 255
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	44 1f       	adc	r20, r20
     e20:	aa 1f       	adc	r26, r26
     e22:	a9 f3       	breq	.-22     	; 0xe0e <__divsf3_pse+0x10>
     e24:	33 d0       	rcall	.+102    	; 0xe8c <__divsf3_pse+0x8e>
     e26:	0e 2e       	mov	r0, r30
     e28:	3a f0       	brmi	.+14     	; 0xe38 <__divsf3_pse+0x3a>
     e2a:	e0 e8       	ldi	r30, 0x80	; 128
     e2c:	30 d0       	rcall	.+96     	; 0xe8e <__divsf3_pse+0x90>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	50 40       	sbci	r21, 0x00	; 0
     e32:	e6 95       	lsr	r30
     e34:	00 1c       	adc	r0, r0
     e36:	ca f7       	brpl	.-14     	; 0xe2a <__divsf3_pse+0x2c>
     e38:	29 d0       	rcall	.+82     	; 0xe8c <__divsf3_pse+0x8e>
     e3a:	fe 2f       	mov	r31, r30
     e3c:	27 d0       	rcall	.+78     	; 0xe8c <__divsf3_pse+0x8e>
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	bb 1f       	adc	r27, r27
     e46:	26 17       	cp	r18, r22
     e48:	37 07       	cpc	r19, r23
     e4a:	48 07       	cpc	r20, r24
     e4c:	ab 07       	cpc	r26, r27
     e4e:	b0 e8       	ldi	r27, 0x80	; 128
     e50:	09 f0       	breq	.+2      	; 0xe54 <__divsf3_pse+0x56>
     e52:	bb 0b       	sbc	r27, r27
     e54:	80 2d       	mov	r24, r0
     e56:	bf 01       	movw	r22, r30
     e58:	ff 27       	eor	r31, r31
     e5a:	93 58       	subi	r25, 0x83	; 131
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	2a f0       	brmi	.+10     	; 0xe6a <__divsf3_pse+0x6c>
     e60:	9e 3f       	cpi	r25, 0xFE	; 254
     e62:	51 05       	cpc	r21, r1
     e64:	68 f0       	brcs	.+26     	; 0xe80 <__divsf3_pse+0x82>
     e66:	50 c0       	rjmp	.+160    	; 0xf08 <__fp_inf>
     e68:	9a c0       	rjmp	.+308    	; 0xf9e <__fp_szero>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	ec f3       	brlt	.-6      	; 0xe68 <__divsf3_pse+0x6a>
     e6e:	98 3e       	cpi	r25, 0xE8	; 232
     e70:	dc f3       	brlt	.-10     	; 0xe68 <__divsf3_pse+0x6a>
     e72:	86 95       	lsr	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f7 95       	ror	r31
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__divsf3_pse+0x74>
     e80:	88 0f       	add	r24, r24
     e82:	91 1d       	adc	r25, r1
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	97 f9       	bld	r25, 7
     e8a:	08 95       	ret
     e8c:	e1 e0       	ldi	r30, 0x01	; 1
     e8e:	66 0f       	add	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	bb 1f       	adc	r27, r27
     e96:	62 17       	cp	r22, r18
     e98:	73 07       	cpc	r23, r19
     e9a:	84 07       	cpc	r24, r20
     e9c:	ba 07       	cpc	r27, r26
     e9e:	20 f0       	brcs	.+8      	; 0xea8 <__divsf3_pse+0xaa>
     ea0:	62 1b       	sub	r22, r18
     ea2:	73 0b       	sbc	r23, r19
     ea4:	84 0b       	sbc	r24, r20
     ea6:	ba 0b       	sbc	r27, r26
     ea8:	ee 1f       	adc	r30, r30
     eaa:	88 f7       	brcc	.-30     	; 0xe8e <__divsf3_pse+0x90>
     eac:	e0 95       	com	r30
     eae:	08 95       	ret

00000eb0 <__fixunssfsi>:
     eb0:	5b d0       	rcall	.+182    	; 0xf68 <__fp_splitA>
     eb2:	88 f0       	brcs	.+34     	; 0xed6 <__fixunssfsi+0x26>
     eb4:	9f 57       	subi	r25, 0x7F	; 127
     eb6:	90 f0       	brcs	.+36     	; 0xedc <__fixunssfsi+0x2c>
     eb8:	b9 2f       	mov	r27, r25
     eba:	99 27       	eor	r25, r25
     ebc:	b7 51       	subi	r27, 0x17	; 23
     ebe:	a0 f0       	brcs	.+40     	; 0xee8 <__fixunssfsi+0x38>
     ec0:	d1 f0       	breq	.+52     	; 0xef6 <__fixunssfsi+0x46>
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	1a f0       	brmi	.+6      	; 0xed2 <__fixunssfsi+0x22>
     ecc:	ba 95       	dec	r27
     ece:	c9 f7       	brne	.-14     	; 0xec2 <__fixunssfsi+0x12>
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <__fixunssfsi+0x46>
     ed2:	b1 30       	cpi	r27, 0x01	; 1
     ed4:	81 f0       	breq	.+32     	; 0xef6 <__fixunssfsi+0x46>
     ed6:	62 d0       	rcall	.+196    	; 0xf9c <__fp_zero>
     ed8:	b1 e0       	ldi	r27, 0x01	; 1
     eda:	08 95       	ret
     edc:	5f c0       	rjmp	.+190    	; 0xf9c <__fp_zero>
     ede:	67 2f       	mov	r22, r23
     ee0:	78 2f       	mov	r23, r24
     ee2:	88 27       	eor	r24, r24
     ee4:	b8 5f       	subi	r27, 0xF8	; 248
     ee6:	39 f0       	breq	.+14     	; 0xef6 <__fixunssfsi+0x46>
     ee8:	b9 3f       	cpi	r27, 0xF9	; 249
     eea:	cc f3       	brlt	.-14     	; 0xede <__fixunssfsi+0x2e>
     eec:	86 95       	lsr	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b3 95       	inc	r27
     ef4:	d9 f7       	brne	.-10     	; 0xeec <__fixunssfsi+0x3c>
     ef6:	3e f4       	brtc	.+14     	; 0xf06 <__fixunssfsi+0x56>
     ef8:	90 95       	com	r25
     efa:	80 95       	com	r24
     efc:	70 95       	com	r23
     efe:	61 95       	neg	r22
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8f 4f       	sbci	r24, 0xFF	; 255
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	08 95       	ret

00000f08 <__fp_inf>:
     f08:	97 f9       	bld	r25, 7
     f0a:	9f 67       	ori	r25, 0x7F	; 127
     f0c:	80 e8       	ldi	r24, 0x80	; 128
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	08 95       	ret

00000f14 <__fp_nan>:
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	80 ec       	ldi	r24, 0xC0	; 192
     f18:	08 95       	ret

00000f1a <__fp_pscA>:
     f1a:	00 24       	eor	r0, r0
     f1c:	0a 94       	dec	r0
     f1e:	16 16       	cp	r1, r22
     f20:	17 06       	cpc	r1, r23
     f22:	18 06       	cpc	r1, r24
     f24:	09 06       	cpc	r0, r25
     f26:	08 95       	ret

00000f28 <__fp_pscB>:
     f28:	00 24       	eor	r0, r0
     f2a:	0a 94       	dec	r0
     f2c:	12 16       	cp	r1, r18
     f2e:	13 06       	cpc	r1, r19
     f30:	14 06       	cpc	r1, r20
     f32:	05 06       	cpc	r0, r21
     f34:	08 95       	ret

00000f36 <__fp_round>:
     f36:	09 2e       	mov	r0, r25
     f38:	03 94       	inc	r0
     f3a:	00 0c       	add	r0, r0
     f3c:	11 f4       	brne	.+4      	; 0xf42 <__fp_round+0xc>
     f3e:	88 23       	and	r24, r24
     f40:	52 f0       	brmi	.+20     	; 0xf56 <__fp_round+0x20>
     f42:	bb 0f       	add	r27, r27
     f44:	40 f4       	brcc	.+16     	; 0xf56 <__fp_round+0x20>
     f46:	bf 2b       	or	r27, r31
     f48:	11 f4       	brne	.+4      	; 0xf4e <__fp_round+0x18>
     f4a:	60 ff       	sbrs	r22, 0
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <__fp_round+0x20>
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	08 95       	ret

00000f58 <__fp_split3>:
     f58:	57 fd       	sbrc	r21, 7
     f5a:	90 58       	subi	r25, 0x80	; 128
     f5c:	44 0f       	add	r20, r20
     f5e:	55 1f       	adc	r21, r21
     f60:	59 f0       	breq	.+22     	; 0xf78 <__fp_splitA+0x10>
     f62:	5f 3f       	cpi	r21, 0xFF	; 255
     f64:	71 f0       	breq	.+28     	; 0xf82 <__fp_splitA+0x1a>
     f66:	47 95       	ror	r20

00000f68 <__fp_splitA>:
     f68:	88 0f       	add	r24, r24
     f6a:	97 fb       	bst	r25, 7
     f6c:	99 1f       	adc	r25, r25
     f6e:	61 f0       	breq	.+24     	; 0xf88 <__fp_splitA+0x20>
     f70:	9f 3f       	cpi	r25, 0xFF	; 255
     f72:	79 f0       	breq	.+30     	; 0xf92 <__fp_splitA+0x2a>
     f74:	87 95       	ror	r24
     f76:	08 95       	ret
     f78:	12 16       	cp	r1, r18
     f7a:	13 06       	cpc	r1, r19
     f7c:	14 06       	cpc	r1, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	f2 cf       	rjmp	.-28     	; 0xf66 <__fp_split3+0xe>
     f82:	46 95       	lsr	r20
     f84:	f1 df       	rcall	.-30     	; 0xf68 <__fp_splitA>
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <__fp_splitA+0x30>
     f88:	16 16       	cp	r1, r22
     f8a:	17 06       	cpc	r1, r23
     f8c:	18 06       	cpc	r1, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	f1 cf       	rjmp	.-30     	; 0xf74 <__fp_splitA+0xc>
     f92:	86 95       	lsr	r24
     f94:	71 05       	cpc	r23, r1
     f96:	61 05       	cpc	r22, r1
     f98:	08 94       	sec
     f9a:	08 95       	ret

00000f9c <__fp_zero>:
     f9c:	e8 94       	clt

00000f9e <__fp_szero>:
     f9e:	bb 27       	eor	r27, r27
     fa0:	66 27       	eor	r22, r22
     fa2:	77 27       	eor	r23, r23
     fa4:	cb 01       	movw	r24, r22
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret

00000faa <__mulsf3>:
     faa:	0b d0       	rcall	.+22     	; 0xfc2 <__mulsf3x>
     fac:	c4 cf       	rjmp	.-120    	; 0xf36 <__fp_round>
     fae:	b5 df       	rcall	.-150    	; 0xf1a <__fp_pscA>
     fb0:	28 f0       	brcs	.+10     	; 0xfbc <__mulsf3+0x12>
     fb2:	ba df       	rcall	.-140    	; 0xf28 <__fp_pscB>
     fb4:	18 f0       	brcs	.+6      	; 0xfbc <__mulsf3+0x12>
     fb6:	95 23       	and	r25, r21
     fb8:	09 f0       	breq	.+2      	; 0xfbc <__mulsf3+0x12>
     fba:	a6 cf       	rjmp	.-180    	; 0xf08 <__fp_inf>
     fbc:	ab cf       	rjmp	.-170    	; 0xf14 <__fp_nan>
     fbe:	11 24       	eor	r1, r1
     fc0:	ee cf       	rjmp	.-36     	; 0xf9e <__fp_szero>

00000fc2 <__mulsf3x>:
     fc2:	ca df       	rcall	.-108    	; 0xf58 <__fp_split3>
     fc4:	a0 f3       	brcs	.-24     	; 0xfae <__mulsf3+0x4>

00000fc6 <__mulsf3_pse>:
     fc6:	95 9f       	mul	r25, r21
     fc8:	d1 f3       	breq	.-12     	; 0xfbe <__mulsf3+0x14>
     fca:	95 0f       	add	r25, r21
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	55 1f       	adc	r21, r21
     fd0:	62 9f       	mul	r22, r18
     fd2:	f0 01       	movw	r30, r0
     fd4:	72 9f       	mul	r23, r18
     fd6:	bb 27       	eor	r27, r27
     fd8:	f0 0d       	add	r31, r0
     fda:	b1 1d       	adc	r27, r1
     fdc:	63 9f       	mul	r22, r19
     fde:	aa 27       	eor	r26, r26
     fe0:	f0 0d       	add	r31, r0
     fe2:	b1 1d       	adc	r27, r1
     fe4:	aa 1f       	adc	r26, r26
     fe6:	64 9f       	mul	r22, r20
     fe8:	66 27       	eor	r22, r22
     fea:	b0 0d       	add	r27, r0
     fec:	a1 1d       	adc	r26, r1
     fee:	66 1f       	adc	r22, r22
     ff0:	82 9f       	mul	r24, r18
     ff2:	22 27       	eor	r18, r18
     ff4:	b0 0d       	add	r27, r0
     ff6:	a1 1d       	adc	r26, r1
     ff8:	62 1f       	adc	r22, r18
     ffa:	73 9f       	mul	r23, r19
     ffc:	b0 0d       	add	r27, r0
     ffe:	a1 1d       	adc	r26, r1
    1000:	62 1f       	adc	r22, r18
    1002:	83 9f       	mul	r24, r19
    1004:	a0 0d       	add	r26, r0
    1006:	61 1d       	adc	r22, r1
    1008:	22 1f       	adc	r18, r18
    100a:	74 9f       	mul	r23, r20
    100c:	33 27       	eor	r19, r19
    100e:	a0 0d       	add	r26, r0
    1010:	61 1d       	adc	r22, r1
    1012:	23 1f       	adc	r18, r19
    1014:	84 9f       	mul	r24, r20
    1016:	60 0d       	add	r22, r0
    1018:	21 1d       	adc	r18, r1
    101a:	82 2f       	mov	r24, r18
    101c:	76 2f       	mov	r23, r22
    101e:	6a 2f       	mov	r22, r26
    1020:	11 24       	eor	r1, r1
    1022:	9f 57       	subi	r25, 0x7F	; 127
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	8a f0       	brmi	.+34     	; 0x104a <__mulsf3_pse+0x84>
    1028:	e1 f0       	breq	.+56     	; 0x1062 <__mulsf3_pse+0x9c>
    102a:	88 23       	and	r24, r24
    102c:	4a f0       	brmi	.+18     	; 0x1040 <__mulsf3_pse+0x7a>
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	bb 1f       	adc	r27, r27
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	91 50       	subi	r25, 0x01	; 1
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	a9 f7       	brne	.-22     	; 0x102a <__mulsf3_pse+0x64>
    1040:	9e 3f       	cpi	r25, 0xFE	; 254
    1042:	51 05       	cpc	r21, r1
    1044:	70 f0       	brcs	.+28     	; 0x1062 <__mulsf3_pse+0x9c>
    1046:	60 cf       	rjmp	.-320    	; 0xf08 <__fp_inf>
    1048:	aa cf       	rjmp	.-172    	; 0xf9e <__fp_szero>
    104a:	5f 3f       	cpi	r21, 0xFF	; 255
    104c:	ec f3       	brlt	.-6      	; 0x1048 <__mulsf3_pse+0x82>
    104e:	98 3e       	cpi	r25, 0xE8	; 232
    1050:	dc f3       	brlt	.-10     	; 0x1048 <__mulsf3_pse+0x82>
    1052:	86 95       	lsr	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b7 95       	ror	r27
    105a:	f7 95       	ror	r31
    105c:	e7 95       	ror	r30
    105e:	9f 5f       	subi	r25, 0xFF	; 255
    1060:	c1 f7       	brne	.-16     	; 0x1052 <__mulsf3_pse+0x8c>
    1062:	fe 2b       	or	r31, r30
    1064:	88 0f       	add	r24, r24
    1066:	91 1d       	adc	r25, r1
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret

00001070 <__udivmodsi4>:
    1070:	a1 e2       	ldi	r26, 0x21	; 33
    1072:	1a 2e       	mov	r1, r26
    1074:	aa 1b       	sub	r26, r26
    1076:	bb 1b       	sub	r27, r27
    1078:	fd 01       	movw	r30, r26
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <__udivmodsi4_ep>

0000107c <__udivmodsi4_loop>:
    107c:	aa 1f       	adc	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	ee 1f       	adc	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	a2 17       	cp	r26, r18
    1086:	b3 07       	cpc	r27, r19
    1088:	e4 07       	cpc	r30, r20
    108a:	f5 07       	cpc	r31, r21
    108c:	20 f0       	brcs	.+8      	; 0x1096 <__udivmodsi4_ep>
    108e:	a2 1b       	sub	r26, r18
    1090:	b3 0b       	sbc	r27, r19
    1092:	e4 0b       	sbc	r30, r20
    1094:	f5 0b       	sbc	r31, r21

00001096 <__udivmodsi4_ep>:
    1096:	66 1f       	adc	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	1a 94       	dec	r1
    10a0:	69 f7       	brne	.-38     	; 0x107c <__udivmodsi4_loop>
    10a2:	60 95       	com	r22
    10a4:	70 95       	com	r23
    10a6:	80 95       	com	r24
    10a8:	90 95       	com	r25
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	bd 01       	movw	r22, r26
    10b0:	cf 01       	movw	r24, r30
    10b2:	08 95       	ret

000010b4 <__tablejump2__>:
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31

000010b8 <__tablejump__>:
    10b8:	05 90       	lpm	r0, Z+
    10ba:	f4 91       	lpm	r31, Z
    10bc:	e0 2d       	mov	r30, r0
    10be:	09 94       	ijmp

000010c0 <malloc>:
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	91 05       	cpc	r25, r1
    10cc:	10 f4       	brcc	.+4      	; 0x10d2 <malloc+0x12>
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	e0 91 69 01 	lds	r30, 0x0169
    10d6:	f0 91 6a 01 	lds	r31, 0x016A
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
    10e2:	23 c0       	rjmp	.+70     	; 0x112a <__stack+0x2b>
    10e4:	40 81       	ld	r20, Z
    10e6:	51 81       	ldd	r21, Z+1	; 0x01
    10e8:	48 17       	cp	r20, r24
    10ea:	59 07       	cpc	r21, r25
    10ec:	a8 f0       	brcs	.+42     	; 0x1118 <__stack+0x19>
    10ee:	48 17       	cp	r20, r24
    10f0:	59 07       	cpc	r21, r25
    10f2:	61 f4       	brne	.+24     	; 0x110c <__stack+0xd>
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	20 97       	sbiw	r28, 0x00	; 0
    10fa:	19 f0       	breq	.+6      	; 0x1102 <__stack+0x3>
    10fc:	9b 83       	std	Y+3, r25	; 0x03
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	2e c0       	rjmp	.+92     	; 0x115e <__stack+0x5f>
    1102:	90 93 6a 01 	sts	0x016A, r25
    1106:	80 93 69 01 	sts	0x0169, r24
    110a:	29 c0       	rjmp	.+82     	; 0x115e <__stack+0x5f>
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	29 f0       	breq	.+10     	; 0x111c <__stack+0x1d>
    1112:	42 17       	cp	r20, r18
    1114:	53 07       	cpc	r21, r19
    1116:	10 f0       	brcs	.+4      	; 0x111c <__stack+0x1d>
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <__stack+0x21>
    111c:	be 01       	movw	r22, r28
    111e:	df 01       	movw	r26, r30
    1120:	02 81       	ldd	r16, Z+2	; 0x02
    1122:	13 81       	ldd	r17, Z+3	; 0x03
    1124:	ef 01       	movw	r28, r30
    1126:	9a 01       	movw	r18, r20
    1128:	f8 01       	movw	r30, r16
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	d9 f6       	brne	.-74     	; 0x10e4 <malloc+0x24>
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	09 f1       	breq	.+66     	; 0x1176 <__stack+0x77>
    1134:	28 1b       	sub	r18, r24
    1136:	39 0b       	sbc	r19, r25
    1138:	24 30       	cpi	r18, 0x04	; 4
    113a:	31 05       	cpc	r19, r1
    113c:	90 f4       	brcc	.+36     	; 0x1162 <__stack+0x63>
    113e:	12 96       	adiw	r26, 0x02	; 2
    1140:	8d 91       	ld	r24, X+
    1142:	9c 91       	ld	r25, X
    1144:	13 97       	sbiw	r26, 0x03	; 3
    1146:	61 15       	cp	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	21 f0       	breq	.+8      	; 0x1154 <__stack+0x55>
    114c:	fb 01       	movw	r30, r22
    114e:	93 83       	std	Z+3, r25	; 0x03
    1150:	82 83       	std	Z+2, r24	; 0x02
    1152:	04 c0       	rjmp	.+8      	; 0x115c <__stack+0x5d>
    1154:	90 93 6a 01 	sts	0x016A, r25
    1158:	80 93 69 01 	sts	0x0169, r24
    115c:	fd 01       	movw	r30, r26
    115e:	32 96       	adiw	r30, 0x02	; 2
    1160:	44 c0       	rjmp	.+136    	; 0x11ea <__stack+0xeb>
    1162:	fd 01       	movw	r30, r26
    1164:	e2 0f       	add	r30, r18
    1166:	f3 1f       	adc	r31, r19
    1168:	81 93       	st	Z+, r24
    116a:	91 93       	st	Z+, r25
    116c:	22 50       	subi	r18, 0x02	; 2
    116e:	31 09       	sbc	r19, r1
    1170:	2d 93       	st	X+, r18
    1172:	3c 93       	st	X, r19
    1174:	3a c0       	rjmp	.+116    	; 0x11ea <__stack+0xeb>
    1176:	20 91 67 01 	lds	r18, 0x0167
    117a:	30 91 68 01 	lds	r19, 0x0168
    117e:	23 2b       	or	r18, r19
    1180:	41 f4       	brne	.+16     	; 0x1192 <__stack+0x93>
    1182:	20 91 02 01 	lds	r18, 0x0102
    1186:	30 91 03 01 	lds	r19, 0x0103
    118a:	30 93 68 01 	sts	0x0168, r19
    118e:	20 93 67 01 	sts	0x0167, r18
    1192:	20 91 00 01 	lds	r18, 0x0100
    1196:	30 91 01 01 	lds	r19, 0x0101
    119a:	21 15       	cp	r18, r1
    119c:	31 05       	cpc	r19, r1
    119e:	41 f4       	brne	.+16     	; 0x11b0 <__stack+0xb1>
    11a0:	2d b7       	in	r18, 0x3d	; 61
    11a2:	3e b7       	in	r19, 0x3e	; 62
    11a4:	40 91 04 01 	lds	r20, 0x0104
    11a8:	50 91 05 01 	lds	r21, 0x0105
    11ac:	24 1b       	sub	r18, r20
    11ae:	35 0b       	sbc	r19, r21
    11b0:	e0 91 67 01 	lds	r30, 0x0167
    11b4:	f0 91 68 01 	lds	r31, 0x0168
    11b8:	e2 17       	cp	r30, r18
    11ba:	f3 07       	cpc	r31, r19
    11bc:	a0 f4       	brcc	.+40     	; 0x11e6 <__stack+0xe7>
    11be:	2e 1b       	sub	r18, r30
    11c0:	3f 0b       	sbc	r19, r31
    11c2:	28 17       	cp	r18, r24
    11c4:	39 07       	cpc	r19, r25
    11c6:	78 f0       	brcs	.+30     	; 0x11e6 <__stack+0xe7>
    11c8:	ac 01       	movw	r20, r24
    11ca:	4e 5f       	subi	r20, 0xFE	; 254
    11cc:	5f 4f       	sbci	r21, 0xFF	; 255
    11ce:	24 17       	cp	r18, r20
    11d0:	35 07       	cpc	r19, r21
    11d2:	48 f0       	brcs	.+18     	; 0x11e6 <__stack+0xe7>
    11d4:	4e 0f       	add	r20, r30
    11d6:	5f 1f       	adc	r21, r31
    11d8:	50 93 68 01 	sts	0x0168, r21
    11dc:	40 93 67 01 	sts	0x0167, r20
    11e0:	81 93       	st	Z+, r24
    11e2:	91 93       	st	Z+, r25
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__stack+0xeb>
    11e6:	e0 e0       	ldi	r30, 0x00	; 0
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	cf 01       	movw	r24, r30
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <free>:
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	09 f4       	brne	.+2      	; 0x1208 <free+0x12>
    1206:	8f c0       	rjmp	.+286    	; 0x1326 <free+0x130>
    1208:	dc 01       	movw	r26, r24
    120a:	12 97       	sbiw	r26, 0x02	; 2
    120c:	13 96       	adiw	r26, 0x03	; 3
    120e:	1c 92       	st	X, r1
    1210:	1e 92       	st	-X, r1
    1212:	12 97       	sbiw	r26, 0x02	; 2
    1214:	e0 90 69 01 	lds	r14, 0x0169
    1218:	f0 90 6a 01 	lds	r15, 0x016A
    121c:	e1 14       	cp	r14, r1
    121e:	f1 04       	cpc	r15, r1
    1220:	89 f4       	brne	.+34     	; 0x1244 <free+0x4e>
    1222:	2d 91       	ld	r18, X+
    1224:	3c 91       	ld	r19, X
    1226:	11 97       	sbiw	r26, 0x01	; 1
    1228:	28 0f       	add	r18, r24
    122a:	39 1f       	adc	r19, r25
    122c:	80 91 67 01 	lds	r24, 0x0167
    1230:	90 91 68 01 	lds	r25, 0x0168
    1234:	82 17       	cp	r24, r18
    1236:	93 07       	cpc	r25, r19
    1238:	89 f5       	brne	.+98     	; 0x129c <free+0xa6>
    123a:	b0 93 68 01 	sts	0x0168, r27
    123e:	a0 93 67 01 	sts	0x0167, r26
    1242:	71 c0       	rjmp	.+226    	; 0x1326 <free+0x130>
    1244:	e7 01       	movw	r28, r14
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	01 c0       	rjmp	.+2      	; 0x124e <free+0x58>
    124c:	ea 01       	movw	r28, r20
    124e:	ca 17       	cp	r28, r26
    1250:	db 07       	cpc	r29, r27
    1252:	38 f4       	brcc	.+14     	; 0x1262 <free+0x6c>
    1254:	4a 81       	ldd	r20, Y+2	; 0x02
    1256:	5b 81       	ldd	r21, Y+3	; 0x03
    1258:	9e 01       	movw	r18, r28
    125a:	41 15       	cp	r20, r1
    125c:	51 05       	cpc	r21, r1
    125e:	b1 f7       	brne	.-20     	; 0x124c <free+0x56>
    1260:	22 c0       	rjmp	.+68     	; 0x12a6 <free+0xb0>
    1262:	bc 01       	movw	r22, r24
    1264:	62 50       	subi	r22, 0x02	; 2
    1266:	71 09       	sbc	r23, r1
    1268:	fb 01       	movw	r30, r22
    126a:	d3 83       	std	Z+3, r29	; 0x03
    126c:	c2 83       	std	Z+2, r28	; 0x02
    126e:	00 81       	ld	r16, Z
    1270:	11 81       	ldd	r17, Z+1	; 0x01
    1272:	ac 01       	movw	r20, r24
    1274:	40 0f       	add	r20, r16
    1276:	51 1f       	adc	r21, r17
    1278:	4c 17       	cp	r20, r28
    127a:	5d 07       	cpc	r21, r29
    127c:	61 f4       	brne	.+24     	; 0x1296 <free+0xa0>
    127e:	48 81       	ld	r20, Y
    1280:	59 81       	ldd	r21, Y+1	; 0x01
    1282:	40 0f       	add	r20, r16
    1284:	51 1f       	adc	r21, r17
    1286:	4e 5f       	subi	r20, 0xFE	; 254
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	51 83       	std	Z+1, r21	; 0x01
    128c:	40 83       	st	Z, r20
    128e:	4a 81       	ldd	r20, Y+2	; 0x02
    1290:	5b 81       	ldd	r21, Y+3	; 0x03
    1292:	53 83       	std	Z+3, r21	; 0x03
    1294:	42 83       	std	Z+2, r20	; 0x02
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	29 f4       	brne	.+10     	; 0x12a6 <free+0xb0>
    129c:	b0 93 6a 01 	sts	0x016A, r27
    12a0:	a0 93 69 01 	sts	0x0169, r26
    12a4:	40 c0       	rjmp	.+128    	; 0x1326 <free+0x130>
    12a6:	f9 01       	movw	r30, r18
    12a8:	b3 83       	std	Z+3, r27	; 0x03
    12aa:	a2 83       	std	Z+2, r26	; 0x02
    12ac:	e9 01       	movw	r28, r18
    12ae:	69 91       	ld	r22, Y+
    12b0:	79 91       	ld	r23, Y+
    12b2:	c6 0f       	add	r28, r22
    12b4:	d7 1f       	adc	r29, r23
    12b6:	ac 17       	cp	r26, r28
    12b8:	bd 07       	cpc	r27, r29
    12ba:	79 f4       	brne	.+30     	; 0x12da <free+0xe4>
    12bc:	dc 01       	movw	r26, r24
    12be:	5e 91       	ld	r21, -X
    12c0:	4e 91       	ld	r20, -X
    12c2:	46 0f       	add	r20, r22
    12c4:	57 1f       	adc	r21, r23
    12c6:	4e 5f       	subi	r20, 0xFE	; 254
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	51 83       	std	Z+1, r21	; 0x01
    12cc:	40 83       	st	Z, r20
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	93 83       	std	Z+3, r25	; 0x03
    12d8:	82 83       	std	Z+2, r24	; 0x02
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <free+0xee>
    12e0:	d7 01       	movw	r26, r14
    12e2:	7c 01       	movw	r14, r24
    12e4:	f7 01       	movw	r30, r14
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <free+0xea>
    12ee:	c7 01       	movw	r24, r14
    12f0:	02 96       	adiw	r24, 0x02	; 2
    12f2:	20 81       	ld	r18, Z
    12f4:	31 81       	ldd	r19, Z+1	; 0x01
    12f6:	82 0f       	add	r24, r18
    12f8:	93 1f       	adc	r25, r19
    12fa:	20 91 67 01 	lds	r18, 0x0167
    12fe:	30 91 68 01 	lds	r19, 0x0168
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	79 f4       	brne	.+30     	; 0x1326 <free+0x130>
    1308:	10 97       	sbiw	r26, 0x00	; 0
    130a:	29 f4       	brne	.+10     	; 0x1316 <free+0x120>
    130c:	10 92 6a 01 	sts	0x016A, r1
    1310:	10 92 69 01 	sts	0x0169, r1
    1314:	04 c0       	rjmp	.+8      	; 0x131e <free+0x128>
    1316:	13 96       	adiw	r26, 0x03	; 3
    1318:	1c 92       	st	X, r1
    131a:	1e 92       	st	-X, r1
    131c:	12 97       	sbiw	r26, 0x02	; 2
    131e:	f0 92 68 01 	sts	0x0168, r15
    1322:	e0 92 67 01 	sts	0x0167, r14
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	e6 e0       	ldi	r30, 0x06	; 6
    132c:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__epilogue_restores__+0x18>

00001330 <__epilogue_restores__>:
    1330:	2a 88       	ldd	r2, Y+18	; 0x12
    1332:	39 88       	ldd	r3, Y+17	; 0x11
    1334:	48 88       	ldd	r4, Y+16	; 0x10
    1336:	5f 84       	ldd	r5, Y+15	; 0x0f
    1338:	6e 84       	ldd	r6, Y+14	; 0x0e
    133a:	7d 84       	ldd	r7, Y+13	; 0x0d
    133c:	8c 84       	ldd	r8, Y+12	; 0x0c
    133e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1340:	aa 84       	ldd	r10, Y+10	; 0x0a
    1342:	b9 84       	ldd	r11, Y+9	; 0x09
    1344:	c8 84       	ldd	r12, Y+8	; 0x08
    1346:	df 80       	ldd	r13, Y+7	; 0x07
    1348:	ee 80       	ldd	r14, Y+6	; 0x06
    134a:	fd 80       	ldd	r15, Y+5	; 0x05
    134c:	0c 81       	ldd	r16, Y+4	; 0x04
    134e:	1b 81       	ldd	r17, Y+3	; 0x03
    1350:	aa 81       	ldd	r26, Y+2	; 0x02
    1352:	b9 81       	ldd	r27, Y+1	; 0x01
    1354:	ce 0f       	add	r28, r30
    1356:	d1 1d       	adc	r29, r1
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	ed 01       	movw	r28, r26
    1364:	08 95       	ret

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
